<html><head><meta http-equiv="Content-Language" content="zh-cn"><meta http-equiv="Content-Type" content="text/html; charset=GB2312"><title>C++编码规范与指导</title><style>
<!--
-->
</style>
</head><body style="line-height: 150%;" vlink="#0000ff" bgcolor="#ffffff" link="#0000ff"><h1 align="center">C++编码规范与指导</h1><p align="center"><b>版本：1.31</b></p><p align="center"><b>作者：白杨</b></p>
<p align="center"><b><a href="http://baiy.cn/">http://baiy.cn</a></b></p><p align="left"><b>推荐浏览设置：</b></p><ul><li><p align="left">屏幕分辨率：≥ 1024x768</p></li><li><p align="left">字体：中（Ctrl＋鼠标滚轮设置）</p></li><li><p align="left">最大化本窗口</p></li></ul><p align="center">　</p><h2 align="left">文档控制</h2><div align="center"><table id="table1" style="border-collapse: collapse;" width="90%" border="2"><tbody><tr><td width="71" align="left" bgcolor="#000000"><font color="#ffffff"><b>版本号</b></font></td><td width="109" align="left" bgcolor="#000000"><b><font color="#ffffff">修改时间</font></b></td><td width="381" align="left" bgcolor="#000000"><b><font color="#ffffff">修改内容</font></b></td><td width="97" align="left" bgcolor="#000000"><b><font color="#ffffff">修改人</font></b></td><td align="left" bgcolor="#000000"><font color="#ffffff"><b>审稿人</b></font></td></tr><tr><td valign="top" width="71" align="left">1.0</td><td valign="top" width="109" align="left">2004-07-22</td><td valign="top" width="381" align="left">
<ul>
	<li>创建</li>
</ul>
</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">田振军</td></tr><tr><td valign="top" width="71" align="left">1.1</td><td valign="top" width="109" align="left">2004-08-05</td><td valign="top" width="381" align="left">
	<ul>
		<li>根据审稿意见修改</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">田振军、马浩军、叶晓峰</td></tr><tr><td valign="top" width="71" align="left">1.2</td><td valign="top" width="109" align="left">2004-08-09</td><td style="border-style: solid; border-width: 1px;" valign="top" width="381" align="left">
	<ul>
		<li>根据审稿意见修改</li>
		<li><b><font size="4">新增</font><a href="http://baiy.cn/doc/cpp/inside_rtti.htm"><font size="4" color="#ff0000">RTTI、虚函数和虚基类的开销分析及使用指导</font></a></b></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">田振军、马浩军、叶晓峰</td></tr><tr><td valign="top" width="71" align="left">1.3</td><td valign="top" width="109" align="left">2004-08-10</td><td valign="top" width="381" align="left">
	<ul>
		<li>重写目录；一些小改动</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td></tr><tr><td valign="top" width="71" align="left">1.4</td><td valign="top" width="109" align="left">2004-08-10</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增<a href="#C++%B3%C9%B3%A4%C6%AA">C++成长篇</a> :-)</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">
	广大CSDN上的网友，鸣谢 :-)</td></tr>
<tr>
	<td valign="top" width="71" align="left">1.5</td><td valign="top" width="109" align="left">
	2004-08-28</td><td valign="top" width="381" align="left">
	<ul>
		<li>根据网友审稿意见修改</li>
		<li>在<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">函数</a>中增加“让相同的代码只出现一次”的条目</li>
		<li>在<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">函数</a>头中增加复杂性描述</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.6</td><td valign="top" width="109" align="left">
	2004-11-22</td><td valign="top" width="381" align="left">
	<ul>
		<li>修正了一些笔误</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.7</td><td valign="top" width="109" align="left">
	2005-03-30</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%BA%AF%CA%FD">成员函数的下划线后缀命名</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.8</td><td valign="top" width="109" align="left">
	2005-05-04</td><td valign="top" width="381" align="left">
	<ul>
		<li>小改动，修正了一些笔误；在类命名规范中增加了<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%C0%E0/%BD%E1%B9%B9">界面类</a>的概念</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.9</td><td valign="top" width="109" align="left">
	2005-05-11</td><td valign="top" width="381" align="left">
	<ul>
		<li>再次调整类命名规范，引入界面、类型和类的概念</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.10</td><td valign="top" width="109" align="left">
	2005-06-06</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%D0%DE%B8%C4%B1%EA%BC%C7">修改标记</a>规则</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.11</td><td valign="top" width="109" align="left">
	2005-06-07</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%C0%E0/%BD%E1%B9%B9">类型和界面的使用策略</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.12</td><td valign="top" width="109" align="left">
	2005-06-28</td><td valign="top" width="381" align="left">
	<ul>
		<li>修正一些笔误</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.13</td><td valign="top" width="109" align="left">
	2005-08-20</td><td valign="top" width="381" align="left">
	<ul>
		<li>小幅修正和调整</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.14</td><td valign="top" width="109" align="left">
	2005-11-08</td><td valign="top" width="381" align="left">
	<ul>
		<li>对全文再次进行修正及调整</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.15</td><td valign="top" width="109" align="left">
	2005-11-14</td><td valign="top" width="381" align="left">
	<ul>
		<li>增加<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%B1%E4%C1%BF">数值前缀的特别记法</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.16</td><td valign="top" width="109" align="left">
	2005-11-16</td><td valign="top" width="381" align="left">
	<ul>
		<li>增加<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%EA">对复杂的宏实行缩进</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.17</td><td valign="top" width="109" align="left">
	2005-11-21</td><td valign="top" width="381" align="left">
	<ul>
		<li>补全<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%D0%DE%B8%C4%B1%EA%BC%C7">修改标记</a>规则</li>
		<li>在<a href="http://baiy.cn/doc/cpp/comments_chs.htm">常用注释</a>中增加一种新型<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E8%AF%AD%E5%8F%A5/%E5%87%BD%E6%95%B0%E7%BB%84">组注释</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.18</td><td valign="top" width="109" align="left">
	2005-12-02</td><td valign="top" width="381" align="left">
	<ul>
		<li>在<a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CE%C4%BC%FE%CD%B7%D7%A2%CA%CD">文件头</a>中增加多线程和异常时安全性描述</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.19</td><td valign="top" width="109" align="left">
	2005-12-25</td><td valign="top" width="381" align="left">
	<ul>
		<li>细化<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">异常过滤器</a>规则</li>
		<li>增加<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">特别代码段注释</a>规则</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">
	CCF上的网友，特别感谢smartsl</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.20</td><td valign="top" width="109" align="left">
	2006-04-03</td><td valign="top" width="381" align="left">
	<ul>
		<li>根据网友意见修正一些笔误</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.21</td><td valign="top" width="109" align="left">
	2007-02-26</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增 <a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">DUMMY 表意宏</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.22</td><td valign="top" width="109" align="left">
	2007-07-18</td><td valign="top" width="381" align="left">
	<ul>
		<li><b><font size="4">新增 </font><font color="#ff0000"><a href="http://baiy.cn/doc/cpp/inside_exception.htm">
		<font size="4" color="#ff0000">C++异常机制的实现方式和开销分析</font></a></font></b></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.23</td><td valign="top" width="109" align="left">
	2007-11-22</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%BA%AF%CA%FD">私有成员函数的层次结构表示</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.24</td><td valign="top" width="109" align="left">
	2008-01-17</td><td valign="top" width="381" align="left">
	<ul>
		<li>措辞和表达上的细微调整</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">
	CCF 上的 Jiang Haibin</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.25</td><td valign="top" width="109" align="left">
	2008-03-12</td><td valign="top" width="381" align="left">
	<ul>
		<li>根据审稿人建议修正一些错别字，感谢 Haibin 兄 :)</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.26</td><td valign="top" width="109" align="left">
	2008-06-26</td><td valign="top" width="381" align="left">
	<ul>
		<li>新增“<a href="#%D5%EB%B6%D4_C_%B3%CC%D0%F2%D4%B1%B5%C4%BF%EC%CB%D9%BB%D8%B9%CB">针对C程序员的快速回顾</a>”一节</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.27</td><td valign="top" width="109" align="left">
	2008-07-27</td><td valign="top" width="381" align="left">
	<ul>
		<li>修正一些错别字</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.28</td><td valign="top" width="109" align="left">
	2009-02-04</td><td valign="top" width="381" align="left">
	<ul>
		<li>更新和一些小修正</li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.29</td><td valign="top" width="109" align="left">
	2009-03-31</td><td valign="top" width="381" align="left">
	<ul>
		<li><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%C0%E0/%BD%E1%B9%B9">新增函数对象的命名规则</a></li>
		<li><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">新增 OWNER 表意宏对返回值的修饰</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.30</td><td valign="top" width="109" align="left">
	2009-04-17</td><td valign="top" width="381" align="left">
	<ul>
		<li><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">新增 WRKBUF 表意宏</a></li>
		<li><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%D2%EC%B3%A3">新增 new / delete 时的异常处理</a></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">1.31</td><td valign="top" width="109" align="left">
	2009-05-07</td><td valign="top" width="381" align="left">
	<ul>
		<li><b><span style="text-decoration: none;"><font size="4">新增 </font>
		</span><a href="http://baiy.cn/doc/cpp/advanced_topic_about_multicore_and_threading.htm"><font size="4" color="#ff0000">
		多处理器环境和线程同步的高级话题</font></a></b></li>
	</ul>
	</td><td valign="top" width="97" align="left">白杨</td><td valign="top" align="left">　</td>
</tr>
<tr>
	<td valign="top" width="71" align="left">　</td><td valign="top" width="109" align="left">
	　</td><td valign="top" width="381" align="left">
	　</td><td valign="top" width="97" align="left">　</td><td valign="top" align="left">　</td>
</tr>
</tbody></table></div><p align="left">　</p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="目录">目录</a></h2><ul style="line-height: 150%;"><li><p align="left"><a href="#%B0%E6%C8%A8%C9%F9%C3%F7">版权声明</a></p></li><li><p align="left"><a href="#%B8%C5%CA%F6">概述</a>
	</p></li><li>
	<p align="left"><a href="#%D5%EB%B6%D4_C_%B3%CC%D0%F2%D4%B1%B5%C4%BF%EC%CB%D9%BB%D8%B9%CB">针对 C 程序员的快速回顾</a></p></li><li><p align="left"><a href="#%D3%EF%B7%A8%B8%DF%C1%C1%D3%EB%D7%D6%CC%E5">语法高亮与字体</a></p><ul style="line-height: 150%;"><li><p align="left"><a href="#%D3%EF%B7%A8%B8%DF%C1%C1%D3%EB%D7%D6%CC%E5_%D7%D6%CC%E5">字体</a></p></li><li><p align="left"><a href="#%D3%EF%B7%A8%B8%DF%C1%C1%D3%EB%D7%D6%CC%E5_%D3%EF%B7%A8%B8%DF%C1%C1">语法高亮</a></p></li></ul></li><li><p align="left"><a href="#%CE%C4%BC%FE%BD%E1%B9%B9">文件结构</a></p><ul style="line-height: 150%;"><li><p align="left"><a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CE%C4%BC%FE%CD%B7%D7%A2%CA%CD">文件头注释</a></p></li><li><p align="left"><a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CD%B7%CE%C4%BC%FE">头文件</a></p></li><li><p align="left"><a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%C4%DA%C1%AA%BA%AF%CA%FD%B6%A8%D2%E5%CE%C4%BC%FE">内联函数定义文件</a></p></li><li><p align="left"><a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CA%B5%CF%D6%CE%C4%BC%FE">实现文件</a></p></li><li><p align="left"><a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CE%C4%BC%FE%B5%C4%D7%E9%D6%AF%BD%E1%B9%B9">文件的组织结构</a></p></li></ul></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2">命名规则</a></p><ul style="line-height: 150%;"><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%C0%E0/%BD%E1%B9%B9">类/结构</a></p></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%BA%AF%CA%FD">函数</a></p></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%B1%E4%C1%BF">变量</a></p></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%B3%A3%C1%BF">常量</a></p></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%C3%B6%BE%D9%A1%A2%C1%AA%BA%CF%A1%A2typedef">枚举、联合、typedef</a></p></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%BA%EA%A1%A2%C3%B6%BE%D9%D6%B5">宏、枚举值</a></p></li><li><p align="left"><a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%C3%FB%BF%D5%BC%E4">名空间</a></p></li></ul></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD">代码风格与版式</a></p><ul style="line-height: 150%;"><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%C0%E0/%BD%E1%B9%B9">类/结构</a></p></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%AF%CA%FD">函数</a></p></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%B1%E4%C1%BF%A1%A2%B3%A3%C1%BF">变量、常量</a></p></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%C3%B6%BE%D9%A1%A2%C1%AA%BA%CF%A1%A2typedef">枚举、联合、typedef</a></p></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%BA%EA">宏</a></p></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%C3%FB%BF%D5%BC%E4">名空间</a></p></li><li><p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%D2%EC%B3%A3">异常</a>
	</p></li><li>
	<p align="left"><a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%D0%DE%B8%C4%B1%EA%BC%C7">修改标记</a></p></li></ul></li><li><p align="left"><a href="#%B0%E6%B1%BE%BF%D8%D6%C6">版本控制</a></p></li><li><p align="left"><a href="#%D7%D4%B6%AF%B9%A4%BE%DF%D3%EB%CE%C4%B5%B5%C9%FA%B3%C9">自动工具与文档生成</a></p></li><li><p align="left"><a href="#%D3%A2%CE%C4%B0%E6">英文版</a></p></li><li><p align="left"><a href="#%B9%D8%D3%DA%B1%BE%B9%E6%B7%B6%B5%C4%B9%E1%B3%B9%CA%B5%CA%A9">关于本规范的贯彻实施</a></p></li><li><p align="left"><a href="#%CA%F5%D3%EF%B1%ED">术语表</a></p></li><li><p align="left"><a href="#%B2%CE%BF%BC%CE%C4%CF%D7">参考文献</a></p></li><li><p align="left"><a href="#C++%B3%C9%B3%A4%C6%AA">C++成长篇</a></p></li><li><p align="left"><a href="#%D3%EB%CE%D2%C1%AA%CF%B5">与我联系</a></p></li></ul><h3 align="left">附件</h3><ul><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/comments_chs.htm">常用注释一览</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/comments_en.htm">常用英文注释一览</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/x_file_header.htm">文件头例子</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/x_hxx_file.htm">头文件例子</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/x_cxx_file.htm">实现文件例</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/x_inl_file.htm">内联函数定义文件例子</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/x_class_style.htm">类/结构的风格与版式例子</a></p></li><li><p align="left">
	<a href="http://baiy.cn/doc/cpp/x_function_style.htm">函数的风格与版式例子</a></p></li><li><p align="left">
<b><a href="http://baiy.cn/doc/cpp/inside_rtti.htm"><font size="4">RTTI、虚函数和虚基类的开销分析和使用指导</font></a></b>
	</p></li><li>
	<p align="left">
<b><a href="http://baiy.cn/doc/cpp/inside_exception.htm"><font size="4">C++异常机制的实现方式和开销分析</font></a></b>
	</p></li><li>
	<p align="left">
<b><a href="http://baiy.cn/doc/cpp/advanced_topic_about_multicore_and_threading.htm"><font size="4">多处理器环境和线程同步的高级话题</font></a></b></p></li></ul><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="版权声明">版权声明</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table15" width="95%" border="0" cellpadding="4"><tbody><tr><td>本文档版权归作者所有。您可以以任意形式免费使用本文档的任意部分，并且无需通知作者。作者对使用本文档所造成的任何直接或者间接的损失不负任何责任。</td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="概述">概述</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table3" width="95%" border="0" cellpadding="4"><tbody><tr><td>对于任何工程项目来说，统一的施工标准都是保证工程质量的重要因素。堪称当今人类最抽象、最复杂的工程――软件工程，自然更加不能例外。<p>高品质、易维护的软件开发离不开清晰严格的编码规范。本文档详细描述C++软件开发过程中的编码规范。本规范也适用于所有在文档中出现的源码。</p><p>除了“语法高亮”部分，本文档中的编码规范都以：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table55" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">规则<font color="#808080">（或建议）</font></td><td valign="top" align="left">解释</td></tr></tbody></table><p align="left">的格式给出，其中强制性规则使用<span style="background-color: rgb(255, 255, 0);">黑色</span>，建议性规则使用<span style="background-color: rgb(255, 255, 0);">灰色</span>。</p></div></td></tr></tbody></table></div><p align="left">　</p><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left">
<a name="针对_C_程序员的快速回顾">针对 C 程序员的快速回顾</a></h2><div align="center">
	<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table255" width="95%" border="0" cellpadding="4"><tbody><tr><td>
		本节旨在较高层面上快速回顾 C 与 C++ 的主要区别。专门针对 C 思想根深蒂固的老咖和经常需要在 C / C++ 项目间频繁切换的 
		coder。C 与 C++ 的主要区别包括：<ul>
			<li><b>空参函数声明</b>的默认参数类型为 void 而不是 int [编译时]。</li>
			<li><b>强类型检查和<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%B1%E4%C1%BF%A1%A2%B3%A3%C1%BF_%C0%E0%D0%CD%D7%AA%BB%BB">专门的类型转换操作</a></b> [编译时，除 
			dynamic_cast 操作]。</li>
			<li><b>名空间</b>：用于归类接口和模块以及防止重名。名空间有自动向父级查询匹配和凯氏匹配。名空间的一个副作用是名称粉碎，可以用 
			extern "C" 声明解决 [编译时]。</li>
			<li><b>类</b>：类将一个 C 结构体和与之相关的函数打包在一起，并且提供了编译时的访问控制检查，为了拟真内置类型，还提供了操作符重载 [编译时]。</li>
			<li><b>类层次结构</b>：类可以通过相互间的继承和派生形成层次结构，派生类继承了基类的数据结构和方法 [编译时]。</li>
			<li><b>模板</b>：本质上是类型参数化。在编译时生成 C++ 
			代码的过程叫做模板实例化，默认的实例化点在当前编译单元第一次使用该模板时，也可以通过显式实例化来增加编译速度。通过部分或完全的专门化可以为指定类型提供优化算法 
			[编译时]。</li>
			<li><b><a href="http://baiy.cn/doc/cpp/inside_rtti.htm">抽象类和虚方法</a></b>：可以通过基类指针或引用访问的动态重载技术 
			[运行时]。</li>
			<li><b><a href="http://baiy.cn/doc/cpp/inside_rtti.htm">多重继承和虚基类</a></b>：一个类可以有多个父亲，为了避免层次结构中出现重复的基类，C++ 
			提供了虚基类 [运行时]。</li>
			<li><b><a href="http://baiy.cn/doc/cpp/inside_rtti.htm">运行时类型信息（RTTI）</a></b>：允许程序员在类层次结构中漫游；完成动态转换（向上、向下和交叉强制）；获取指定类型的 
			typeid 信息，用户可以以此为基础实现反射、高级调试等各类功能。</li>
			<li><b><a href="http://baiy.cn/doc/cpp/inside_exception.htm">异常处理</a></b>：本质上是一种安全的 
			longjmp 机制，在退栈期间能够完成必要的对象析构动作。主要用于在发生错误时跳转到相应的错误处理分支。</li>
		</ul>
		</td></tr></tbody></table></div>
<p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="语法高亮与字体">语法高亮与字体</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table4" width="95%" border="0" cellpadding="4"><tbody><tr><td><h3><a name="语法高亮与字体_字体">字体</a><br>
<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table5" width="95%" border="0" cellpadding="4"><tbody><tr><td>文字是信息的载体；文字使我们能够把个人的经验和思想长久的保存下来；文字使我们得以站在前人的肩膀上向前发展；文字的诞生标志着人类文明的开始……<p>扯的太离谱了？好吧，至少你应该承认：</p><ul><li>没有文字就不可能出现计算机（先不管他是哪国字 
		<img src="index_files/a_005.gif" width="19" border="0" height="19">）</li><li>没有文字大家就不可能（也没必要）学会如何写程序</li><li>在过去、现在和可见的将来，使用文字符号都是编写计算机软件的主要方式方法 
		<img src="index_files/a_003.gif" width="19" border="0" height="19"></li></ul><p>既然文字如此重要，它的长相自然会受到广泛的关注。如今这个连MM都可以“千面”的年头，字体的种类当然是数不胜数。</p><p>然而，前辈先贤们曾经用篆体教导偶们：<a href="#%CA%F5%D3%EF%B1%ED"><img src="index_files/mygj_bcfy.png" width="217" border="0" height="22"></a>。想让大家读到缩进、对齐正确一致，而且不出现乱码的源文件，我们就要使用相互兼容的字体。</p><p>字体规范如下：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table31" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">使用等宽字体</td><td valign="top" align="left">由于非等宽字体在对齐等方面问题多多，任何情况下，源码都必须使用等宽字体编辑和显示。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">每个制表符（TAB）的宽度为4个半角字符</td><td valign="top" align="left">不一致的缩进宽度会导致行与行之间的参差不齐，进而严重影响代码的可读性。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">优先使用<b>Fixedsys</b></font></td><td valign="top" align="left">在Windows平台中，应该优先使用字体：<b>Fixedsys</b>，这也是操作系统UI（所有的菜单、按钮、标题栏、对话框等等）默认使用的字体。该字体的好处很多：<ul><li>兼容性好：所有Windows平台都支持该字体<br>　</li><li>显示清晰：该字体为点阵字体，相对于矢量字体来说在显示器中呈现的影像更为清晰。矢量字体虽然可以自由缩放，但这个功能对于纯文本格式的程序源码来说没有任何实际作用。<br><br>而且当显示字号较小（12pt以下）时，矢量字体还有一些明显的缺陷：<br>　<ul><li>文字的边缘会有严重的凹凸感。</li><li>一些笔画的比例也会失调。</li><li>开启了柔化字体边缘后，还会使文字显得模糊不清。</li></ul><p>说句题外话，这也是Gnome和KDE等其它GUI环境不如Windows的一个重要方面
			（2009年更新：现如今这些环境的界面和字体也不比 Windows 差了）。<br>　</p></li><li>支持多语言：Fixedsys可以兼容其它UNICODE等宽字体，
			所以支持世界上几乎所有的文字符号。这对编写中文注释是很方便的。</li></ul></td></tr></tbody></table></div></td></tr></tbody></table><p>　</p><h3 align="left"><a name="语法高亮与字体_语法高亮">语法高亮</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table6" width="95%" border="0" cellpadding="4"><tbody><tr><td>几乎所有的现代源码编辑器均不同在程度上支持语法高亮显示的功能。缤纷的色彩不但可以吸引MM们的目光，还可以在很大程度上帮助我们阅读那些奥涩如咒语般的源代码。<p>统一的语法高亮规则不仅能让我们望色生意，还可以帮助我们阅读没有编码规范，或者规范执行很烂的源码。</p><p>所有在文档中出现的代码段均必须严格符合下表定义的语法高亮规范。在编辑源码时，应该根据编辑器支持的自定义选项最大限度地满足下表定义的高亮规范。</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table7" width="95%" border="2" cellpadding="4"><tbody><tr><td valign="top" width="159" align="left" bgcolor="#c0c0c0"><b>类型</b></td><td valign="top" width="229" align="left" bgcolor="#c0c0c0"><b>颜色</b></td><td valign="top" align="left" bgcolor="#c0c0c0"><b>举例</b></td></tr><tr><td valign="top" width="159" align="left">注释</td><td valign="top" width="229" align="left"><font color="#0000ff">
			<img src="index_files/green.png" width="26" border="0" height="17"> </font><font color="#ff0000">R0</font>;<font color="#009933">G128</font>;<font color="#0000ff">B0</font>（深绿）</td><td valign="top" align="left"><font color="#008000" face="Fixedsys">// 注释例子</font></td></tr><tr><td valign="top" width="159" align="left" height="30">关键字</td><td valign="top" width="229" align="left" height="30"><font color="#ff0000">
				<img src="index_files/blue.png" width="26" border="0" height="17"> R0</font>;<font color="#009933">G0</font>;<font color="#0000ff">B255</font>（蓝）</td><td valign="top" align="left" height="30"><font color="#0000ff" face="Fixedsys">typedef, int, dynamic_cast class ...</font></td></tr><tr><td valign="top" width="159" align="left">类、结构、联合、枚举等其它自定义类型</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/blue.png" width="26" border="0" height="17"> R0</font>;<font color="#009933">G0</font>;<font color="#0000ff">B255</font>（蓝）</td><td valign="top" align="left"><font color="#0000ff" face="Fixedsys">class CMyClass, enum ERRTYPE, typedef int CODE ...</font></td></tr><tr><td valign="top" width="159" align="left">名空间</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/blue.png" width="26" border="0" height="17"> R0</font>;<font color="#009933">G0</font>;<font color="#0000ff">B255</font>（蓝）</td><td valign="top" align="left"><font color="#0000ff" face="Fixedsys">namespace BaiY</font></td></tr><tr><td valign="top" width="159" align="left" height="27">数字</td><td valign="top" width="229" align="left" height="27"><font color="#ff0000">
				<img src="index_files/red.png" width="26" border="0" height="17"> R255</font>;<font color="#009933">G0</font>;<font color="#0000ff">B0</font>（红）</td><td valign="top" align="left" height="27"><font color="#ff0000" face="Fixedsys">012 119u 0xff ...</font></td></tr><tr><td valign="top" width="159" align="left" height="30">字符、字符串</td><td valign="top" width="229" align="left" height="30"><font color="#ff0000">
				<img src="index_files/deep_blue_green.png" width="26" border="0" height="17"> R0</font>;<font color="#009933">G128</font>;<font color="#0000ff">B128</font>（深蓝绿）</td><td valign="top" align="left" height="30"><font color="#008080" face="Fixedsys">"string", 'c ...</font></td></tr><tr><td valign="top" width="159" align="left">宏定义、枚举值</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/orange_yellow.png" width="26" border="0" height="17"> R255</font>;<font color="#009933">G128</font>;<font color="#0000ff">B0</font>（橙黄）</td><td valign="top" align="left"><font face="Fixedsys"><font color="#0000ff">#define </font><font color="#ff8000">UNICODE</font>, <font color="#0000ff">enum </font><font color="#880000">{</font><font color="#ff8000"> RED</font><font color="#880000">,</font><font color="#ff8000"> GREEN</font><font color="#880000">,</font><font color="#ff8000"> BLUE </font><font color="#880000">};</font></font></td></tr><tr><td valign="top" width="159" align="left">操作符</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/brown.png" width="26" border="0" height="17"> R136</font>;<font color="#009933">G0</font>;<font color="#0000ff">B0</font>（棕色）</td><td valign="top" align="left"><font color="#880000" face="Fixedsys">&lt; &gt; , = + - * / ; { } ( ) [ ] ...</font></td></tr><tr><td valign="top" width="159" align="left">方法/函数</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/brown.png" width="26" border="0" height="17"> R136</font>;<font color="#009933">G0</font>;<font color="#0000ff">B0</font>（棕色）</td><td valign="top" align="left"><font color="#880000" face="Fixedsys">MyFunc()</font></td></tr><tr><td valign="top" width="159" align="left">变量</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/gray.png" width="26" border="0" height="17"> R128</font>;<font color="#009933">G128</font>;<font color="#0000ff">B128</font>（中灰色）</td><td valign="top" align="left"><font face="Fixedsys"><font color="#0000ff">int </font><font color="#808080">nMyVar</font><font color="#880000">;</font></font></td></tr><tr><td valign="top" width="159" align="left">背景</td><td valign="top" width="229" align="left">
				<img src="index_files/white.png" width="26" border="0" height="17"> <font color="#ff0000">R255</font>;<font color="#009933">G255</font>;<font color="#0000ff">B255</font>（白色）</td><td valign="top" align="left">　</td></tr><tr><td valign="top" width="159" align="left">其它</td><td valign="top" width="229" align="left"><font color="#ff0000">
				<img src="index_files/black.png" width="26" border="0" height="17"> R0</font>;<font color="#009933">G0</font>;<font color="#0000ff">B0</font>（黑色）</td><td valign="top" align="left"><font face="Fixedsys">other things（通常是一个错误）</font></td></tr></tbody></table></div></td></tr></tbody></table></div></div></td></tr></tbody></table></div><p>　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2><a name="文件结构">文件结构</a></h2><div align="center">
<table id="table208" bordercolorlight="#808080" bordercolordark="#808080" style="border-collapse: collapse;" width="95%" border="0">
	<tbody><tr>
		<td><h3 align="left"><a name="文件结构_文件头注释">文件头注释</a><br>
		<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table209" width="95%" border="0" cellpadding="4"><tbody><tr><td>所有C++的源文件均必须包含一个规范的文件头，文件头包含了该文件的名称、功能概述、作者、版权和版本历史信息等内容。标准文件头的格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table210" width="95%" border="0" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal"><font color="#008000" face="Fixedsys"><span style="font-size: 10pt;" lang="EN-US">/*! @file<br>********************************************************************************<br>&lt;PRE&gt;<br>模块名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;文件所属的模块名称&gt;<br>文件名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;文件名&gt;<br>相关文件&nbsp;&nbsp;&nbsp;&nbsp; : &lt;与此文件相关的其它文件&gt;<br>文件实现功能 : &lt;描述该文件实现的主要功能&gt; <br>作者&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;作者部门和姓名&gt;<br>版本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;当前版本号&gt;<br>
				--------------------------------------------------------------------------------<br>
				多线程安全性 : &lt;</span><span style="font-size: 10pt;">是/否</span><span style="font-size: 10pt;" lang="EN-US">&gt;[，说明]<br>
				异常时安全性 : &lt;</span><span style="font-size: 10pt;">是/否</span><span style="font-size: 10pt;" lang="EN-US">&gt;[，说明]<br>
				--------------------------------------------------------------------------------<br>备注&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;其它说明&gt;<br>--------------------------------------------------------------------------------<br>修改记录 : <br>日
期&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 版本&nbsp;&nbsp;&nbsp;&nbsp;
修改
人&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
修改内容<br>YYYY/MM/DD&nbsp;&nbsp; X.Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;作者或修改者名&gt;&nbsp;&nbsp;&nbsp; &lt;</span><span style="font-size: 10pt;" lang="EN-US">修改内容</span><span style="font-size: 10pt;" lang="EN-US">&gt;<br>&lt;/PRE&gt;<br>*******************************************************************************/</span></font></p></td></tr></tbody></table><p class="MsoNormal" align="left">　</p><p class="MsoNormal" align="left">如果该文件有其它需要说明的地方，还可以专门为此扩展一节
				，节与节之间用长度为80的“=”带分割：</p>
				<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table211" width="95%" border="0" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal"><font color="#008000" face="Fixedsys"><span style="font-size: 10pt;" lang="EN-US">/*! @file<br>********************************************************************************<br>&lt;PRE&gt;<br>模块名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;文件所属的模块名称&gt;<br>文件名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;文件名&gt;<br>相关文件&nbsp;&nbsp;&nbsp;&nbsp; : &lt;与此文件相关的其它文件&gt;<br>文件实现功能 : &lt;描述该文件实现的主要功能&gt; <br>作者&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;作者部门和姓名&gt;<br>版本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;当前版本号&gt;<br></span><span style="font-size: 10pt;" lang="EN-US">
					--------------------------------------------------------------------------------<br>
					多线程安全性 : &lt;</span><span style="font-size: 10pt;">是/否</span><span style="font-size: 10pt;" lang="EN-US">&gt;[，说明]<br>
					异常时安全性 : &lt;</span><span style="font-size: 10pt;">是/否</span><span style="font-size: 10pt;" lang="EN-US">&gt;[，说明]<br>
					</span><span style="font-size: 10pt;" lang="EN-US">--------------------------------------------------------------------------------<br>备注&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;其它说明&gt;<br>--------------------------------------------------------------------------------<br>修改记录 : <br>日
期&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 版本&nbsp;&nbsp;&nbsp;&nbsp;
修改
人&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
修改内容<br>YYYY/MM/DD&nbsp;&nbsp; X.Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;作者或修改者名&gt;&nbsp;&nbsp;&nbsp; &lt;</span><span style="font-size: 10pt;" lang="EN-US">修改内容</span><span style="font-size: 10pt;" lang="EN-US">&gt;<br>&lt;/PRE&gt;<br>********************************************************************************<br><br>* 项目1<br>&nbsp; - 项目1.1<br>&nbsp; - 项目1.2<br><br>================================================================================<br>* 项目2<br>&nbsp; - </span><span style="font-size: 10pt;" lang="EN-US">项目</span><span style="font-size: 10pt;" lang="EN-US">2.1<br>&nbsp; - </span><span style="font-size: 10pt;" lang="EN-US">项目</span><span style="font-size: 10pt;" lang="EN-US">2.2<br>....<br><br>*******************************************************************************/</span></font></p></td></tr></tbody></table><p class="MsoNormal" align="left">每行注释的长度都不应该超过80个半角字符。还要注意缩进和对齐，以利阅读。</p>
				<p class="MsoNormal" align="left"><b>注意</b>：将多线程和异常时安全性描述放在文件头，而不是类或者函数注释中，是为了体现以下设计思想：同一个模块中的界面，其各方面的操作方式和使用风格应该尽量保持一致。</p><p class="MsoNormal" align="left">关于文件头的完整例子，请参见：<a href="http://baiy.cn/doc/cpp/x_file_header.htm">文件头例子</a></p><p class="MsoNormal" align="left">关于文件头的模板，请参见：<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E6%96%87%E4%BB%B6%E5%A4%B4%E6%B3%A8%E9%87%8A">文件头注释模板</a></p></div></td></tr></tbody></table><p class="MsoNormal" align="left">　</p><h3 align="left"><a name="文件结构_头文件">头文件</a><br>
			<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table212" width="95%" border="0" cellpadding="4"><tbody><tr><td>头文件通常由以下几部分组成：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table213" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">文件头注释</td><td valign="top" align="left">每个头文件，无论是内部的还是外部的，都应该由一个<a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CE%C4%BC%FE%CD%B7%D7%A2%CA%CD">规范的文件头注释</a>作为开始。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">预处理块</td><td valign="top" align="left">为了防止头文件被重复引用，应当用ifndef/define/endif结构产生预处理块。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">函数和类/结构的声明等</td><td valign="top" align="left">声明模块的接口<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">需要包含的内联函数定义文件（如果有的话）</td><td valign="top" align="left">如果类中的内联函数较多，或者一个头文件中包含多个类的定义（不推荐），可以将所有内联函数定义放入一个单独的<a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%C4%DA%C1%AA%BA%AF%CA%FD%B6%A8%D2%E5%CE%C4%BC%FE">内联函数定义文件</a>中，并在类声明之后用“#include”指令把它包含进来。</td></tr></tbody></table></div><p>头文件的编码规则：</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table214" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">引用文件的格式</td><td valign="top" align="left">用 #include 
					<span style="background-color: rgb(255, 255, 0); font-weight: 700;">&lt;</span><i>filename</i>.h<span style="background-color: rgb(255, 255, 0); font-weight: 700;">&gt;</span> 格式来引用标准库和系统库的头文件（编译器将从标准库目录开始搜索）。<p>用 #include 
					<span style="background-color: rgb(255, 255, 0); font-weight: 700;">"</span><i>filename</i>.h<span style="background-color: rgb(255, 255, 0); font-weight: 700;">"</span> 格式来引用当前工程中的头文件（编译器将从该文件所在目录开始搜索）。</p><p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">分割多组接口（如果有的话）</td><td valign="top" align="left">如果在一个头件中定义了多个类或者多组接口（不推荐），为了便于浏览，应该在每个类/每组接口间使用<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E5%88%86%E5%89%B2%E5%B8%A6">分割带</a>把它们相互分开。</td></tr></tbody></table></div><p>关于头文件的完整例子，请参见：<a href="http://baiy.cn/doc/cpp/x_hxx_file.htm">头文件例子</a></p></td></tr></tbody></table>
			<p align="left">　</p><h3 align="left"><a name="文件结构_内联函数定义文件">内联函数定义文件</a><br>
			<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table215" width="95%" border="0" cellpadding="4"><tbody><tr><td>如上所述，在内联函数较多的情况下，为了避免头文件过长、版面混乱，可以将所有的内联函数定义移到一个单独的文件中去，然后再用#include指令将它包含到类声明的后面。这样的文件称为一个内联函数定义文件。<p>按照惯例，应该将这个文件命名为“<i>filename</i>.inl”，其中“filename”与相应的头文件和实现文件相同。</p><p>内联函数定义文件由以下几部分组成：</p><div align="center">
					<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table216" width="95%" border="1" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">文件头注释</td><td valign="top" align="left">每内联函数定义文件都应该由一个<a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CE%C4%BC%FE%CD%B7%D7%A2%CA%CD">规范的文件头注释</a>作为开始</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">内联函数定义</td><td valign="top" align="left">内联函数的实现体</td></tr></tbody></table><p align="left">内联函数定义文件的编码规则：</p>
					<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table217" width="95%" border="1" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">分割多组接口（如果有的话）</td><td valign="top" align="left">如果在一个内联函数定义文件中定义了多个类或者多组接口的内联函数（不推荐），必须在每个类/每组接口间使用<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E5%88%86%E5%89%B2%E5%B8%A6">分割带</a>把它们相互分开。<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">文件组成中为什么没有预处理块？</td><td valign="top" align="left">
						与头文件不同，内联函数定义文件通常不需要定义预处理块，这是因为他们总是被包含在与其相应的头文件预处理块内。</td></tr></tbody></table></div><p>关于内联函数定义文件的完整例子，请参见：<a href="http://baiy.cn/doc/cpp/x_inl_file.htm">内联函数定义文件例子</a></p></td></tr></tbody></table>
				<p align="left">　</p></div><h3 align="left"><a name="文件结构_实现文件">实现文件</a><br>
			<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table218" width="95%" border="0" cellpadding="4"><tbody><tr><td>实现文件包含所有数据和代码的实现体。实现文件的格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table219" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">文件头注释</td><td valign="top" align="left">每个实现文件都应该由一个<a href="#%CE%C4%BC%FE%BD%E1%B9%B9_%CE%C4%BC%FE%CD%B7%D7%A2%CA%CD">规范的文件头注释</a>作为开始<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">对配套头文件的引用</td><td valign="top" align="left">引用声明了此文件实现的类、函数及数据的头文件<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">对一些仅用于实现的头文件的引用（如果有的话）</td><td valign="top" align="left">将仅与实现相关的接口包含在实现文件里（而不是头文件中）是一个非常好的编程习惯。这样可以有效地屏蔽不应该暴露的实现细节，将实现改变对其它模块的影响降低到最少 。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">程序的实现体</td><td valign="top" align="left">数据和函数的定义</td></tr></tbody></table><p align="left">实现文件的编码规则：</p>
					<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table220" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">分割每个部分</td><td valign="top" align="left">在本地（静态）定义和外部定义间，以及不同接口或不同类的实现之间，应使用<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E5%88%86%E5%89%B2%E5%B8%A6">分割带</a>相互分开。</td></tr></tbody></table></div><p>关于实现文件的完整例子，请参见：<a href="http://baiy.cn/doc/cpp/x_cxx_file.htm">实现文件例子</a></p></td></tr></tbody></table>
				<p align="left">　</p><h3 align="left"><a name="文件结构_文件的组织结构">文件的组织结构</a><br>
				<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
					<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table221" width="95%" border="0" cellpadding="4"><tbody><tr><td>由于项目性质、规模上存在着差异，不同项目间的文件组织形式差别很大。但文件、目录组织的基本原则应当是一致的：使外部接口与内部实现尽量分离；尽可能清晰地表达软件的层次结构……<p>为此提供两组典型项目的文件组织结构范例作为参考：</p><div align="center">
						<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table222" width="95%" border="0" cellpadding="4"><tbody><tr><td><h4>功能模块/库的文件组织形式</h4><div align="center">
							<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table223" width="95%" border="0" cellpadding="4"><tbody><tr><td>显而易见，编写功能模块和库的主要目的是为其它模块提供一套完成特定功能的API，这类项目的文件组织结构通常如下图所示：<p>
								<img src="index_files/dir_list_lib.png" width="216" border="0" height="136"></p><p>其中：</p><div align="center">
								<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table224" width="95%" border="1" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">contrib</font></td><td valign="top" align="left">当前项目所依赖的所有第三方软件，可以按类别分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">doc</font></td><td valign="top" align="left">项目文档</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">include</font></td><td valign="top" align="left">声明外部接口的所有头文件和内联定义文件。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">lib</font></td><td valign="top" align="left">编译好的二进制库文件，可以按编译器、平台分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">makefile</font></td><td valign="top" align="left">用于编译项目的makefile文件和project文件等。可以按编译器、平台分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">src</font></td><td valign="top" align="left">所有实现文件和声明内部接口的头文件、内联定义文件。可按功能划分；支持编译器、平台等类别分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">test</font></td><td valign="top" align="left">存放测试用代码的目录。</td></tr></tbody></table></div></td></tr></tbody></table><h4 align="left">应用程序的文件组织形式</h4><div align="center">
							<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table225" width="95%" border="0" cellpadding="4"><tbody><tr><td>与功能模块不同，应用程序是一个交付给最终用于使用的、可以独立运行并提供完整功能的软件产品，它通常不提供编程接口，应用程序的典型文件组织形式如下图所示：<p>
								<img src="index_files/dir_list_app.png" width="204" border="0" height="122"></p><div align="center">
								<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table226" width="95%" border="1" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">contrib</font></td><td valign="top" align="left">当前项目所依赖的所有第三方软件，可以按类别分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">doc</font></td><td valign="top" align="left">项目文档</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">makefile</font></td><td valign="top" align="left">用于编译项目的makefile文件和project文件等。可以按编译器、平台分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">setup</font></td><td valign="top" align="left">安装程序，以及制作安装程序所需要的项目文件和角本。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">src</font></td><td valign="top" align="left">所有源文件。可按功能划分；支持编译器、平台等类别分设子目录。</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">test</font></td><td valign="top" align="left">存放测试用代码的目录。</td></tr></tbody></table></div></td></tr></tbody></table></div></div></td></tr></tbody></table></div></td></tr></tbody></table></div></div></div></div>
		</td>
	</tr>
</tbody></table>
<p align="left">　</p></div><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="命名规则">命名规则</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table18" width="95%" border="0" cellpadding="4"><tbody><tr><td>如果想要有效的管理一个稍微复杂一点的体系，针对其中事物的一套统一、带层次结构、清晰明了的命名准则就是必不可少而且非常好用的工具。<p>活跃在生物学、化学、军队、监狱、黑社会、恐怖组织等各个领域内的大量有识先辈们都曾经无数次地以实际行动证明了以上公理的正确性。除了上帝（设它可以改变世间万物的秩序）以外，相信没人有实力对它不屑一顾 
	<img src="index_files/a_004.gif" width="19" border="0" height="19"></p><p>在软件开发这一高度抽象而且十分复杂的活动中，命名规则的重要性更显得尤为突出。一套定义良好并且完整的、在整个项目中统一使用的命名规范将大大提升源代码的可读性和软件的可维护性。</p><p>在引入细节之前，先说明一下命名规范的整体原则：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table53" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">同一性</td><td valign="top" align="left">在编写一个子模块或派生类的时候，要遵循其基类或整体模块的命名风格，保持命名风格在整个模块中的同一性。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">标识符组成</td><td valign="top" align="left">标识符采用英文单词或其组合，应当直观且可以拼读，可望文知意，用词应当准确。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">最小化长度 &amp;&amp; 最大化信息量原则</td><td valign="top" align="left">在保持一个标识符意思明确的同时，应当尽量缩短其长度。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">避免过于相似</td><td valign="top" align="left">不要出现仅靠大小写区分的相似的标识符，例如“i”与“I”，“function”与“Function”等等。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">避免在不同级别的作用域中重名</td><td valign="top" align="left">程序中不要出现名字完全相同的局部变量和全局变量，尽管两者的作用域不同而不会发生语法错误，但容易使人误解。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">正确命名具有互斥意义的标识符</td><td valign="top" align="left">用正确的反义词组命名具有互斥意义的标识符，如："nMinValue" 和 "nMaxValue"，"GetName()" 和 "SetName()" ....<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">避免名字中出现数字编号</font></td><td valign="top" align="left">尽量避免名字中出现数字编号，如Value1,Value2等，除非逻辑上的确需要编号。这是为了防止程序员偷懒，不肯为命名动脑筋而导致产生无意义的名字（因为用数字编号最省事）。</td></tr></tbody></table></div><h3>　</h3><h3><a name="命名规则_类/结构">类/结构</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table32" width="95%" border="0" cellpadding="4"><tbody><tr><td>除了异常类等个别情况（不希望被用户看作一个普通的、正常的类之情况）外，C++类/结构的命名应该遵循以下准则：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table54" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">C++类/结构的命名</td><td valign="top" align="left">
		<b>类</b>的名称都要以大写字母“C”开头，后跟一个或多个单词。为便于界定，每个单词的首字母要大写。<p>
		特别地，由于<b>界面</b>与
其它类概念上的巨大差别，规定界面类要以大写字母“I”开头。界面类描述一个服务（一组被命名的操作集合），在C＋＋中，界面与其它类间的最大区别在于，
界面类中不包含任何数据结构（属性），也不包括任何具体的操作和实现，界面类通常仅包含一组纯虚函数的声明而不包含任何实现和数据。在一些其它语言中，一
个界面也被称作一个接口及其实现契约。</p>
		<p>
		另一个与接口相似的概念是<b>类型</b>，类型与接口的不同点在于，类型可以包含部分接口的实现或包含一些接口默认的或不完整的实现，一个类型也可以包含一些属性。规定类型类要以大写字母“T”开头。例如：轿车类型 
		"TCar"、线程类型 "TThread" 等等。在C＋＋种，类型类也叫做结点类。</p>
		<p>
		在现实世界中，类型和界面的区别往往比较微妙。在真实代码中，有些类除了包含纯虚函数以外，也可能同时包含几个带简单默认实现的普通虚函数。例如：某个类中可能包含一个（非纯虚）虚方法 
		IsLoadable，并定义了该方法的默认实现：return false;。我们不难找出很多类似的例子。</p>
		<p>
		以下是一些类型和界面的界定策略：</p>
		<ul>
			<li>如果一个类中包含静态成员，则一定不是界面</li>
			<li>如果一个类中包含属性，则一定不是界面</li>
			<li>如果一个类中包含非虚方法，则一定不是界面</li>
			<li>如果一个类中包含非公有成员，则一定不是界面</li>
			<li>如果一个类中包含模板方法，则一定不是界面。<br>
			这里的模板方法是指那些调用了该类中其它虚函数的成员，这样的方法通常用于实现针对某种应用的算法框架，这显然超出了界面的范畴。<br>
			在C＋＋中，模板方法的另一个意思通常指使用函数模板的成员，由于C＋＋函数模板只能是非虚的，所以包含这种方法的类也一定不是界面。</li>
			<li>通常定义那些不十分明确的接口时，先将其指定为一个界面，必要时再把它提升为一个类型。</li>
		</ul>
		<p><b>模板类</b>的命名规范与实体类相同。</p><p>
		为了更好地表示代码段之间的相关性和增加程序的可读性。我们经常会把一段仅在某个函数内反复使用的代码片段封装为一个<b>函数对象</b>，并定义在这个函数体内。对于这类实现功能简单，并且主要通过 
		operator() 来使用的类/结构，其名称应当以大写字母“FO”开头，如："FONameChecker" 等。</p><p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">推荐的组成形式</font></td><td valign="top" align="left">类的命名推荐用"<span style="background-color: rgb(255, 255, 0);">名词</span>"或"<span style="background-color: rgb(255, 255, 0);">形容词＋名词</span>"的形式，例如："CAnalyzer", 
			"CFastVector", "IUnknown", "IDBWriter",&nbsp;"TTimer", 
			"TThread" ....</td></tr></tbody></table><p align="left">不同于C++类的概念，传统的C结构体只是一种将一组数据捆绑在一起的方式。传统C结构体的命名规则为：</p><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table57" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">传统C结构体的命名</td><td valign="top" align="left">传统C结构体的名称全部由大写字母组成，单词间使用下划线界定，例如："SERVICE_STATUS", "DRIVER_INFO" ....</td></tr></tbody></table></div></td></tr></tbody></table><p align="left">　</p><h3 align="left"><a name="命名规则_函数">函数</a><br>
		<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table34" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table58" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">函数的命名</td><td valign="top" align="left">函数的名称由一个或多个单词组成。为便于界定，每个单词的首字母要大写。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">推荐的组成形式</font></td><td valign="top" align="left">函数名应当使用"<span style="background-color: rgb(255, 255, 0);">动词</span>"或者"<span style="background-color: rgb(255, 255, 0);">动词＋名词</span>"（动宾词组）的形式。例如："GetName()", "SetValue()", "Erase()", "Reserve()" ....<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">保护成员函数</td><td valign="top" align="left">保护成员函数的开头应当加上一个下划线“_”以示区别，例如："_SetState()" ....<p>　</p></td></tr>
			<tr>
				<td valign="top" width="182" align="left" bgcolor="#ebebeb">私有成员函数</td><td valign="top" align="left">类似地，私有成员函数的开头应当加上两个下划线“__”，例如："__DestroyImp()" ....<p>　</p></td>
			</tr>
			<tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">
				<font color="#808080">私有成员函数的层次结构表示</font></td><td valign="top" align="left">
				通常来说，在一个类中，公有方法、保护方法和私有方法所完成的任务总是呈现一种逐级依次细化的层次结构（意即：保护方法所实现的功能通常比该类中的公有方法更为细小琐碎；类似地，私有方法的功能也比其保护方法更具原子性）。<p>
				因此，对于遵循以上规则，并且功能较为复杂的类，在按照“公有、保护、私有”的三级形式划分以后，如果其私有成员中仍然存在明显不同的功能粒度，则可以通过追加更多下划线前缀的形式予以表示。</p>
				<p>例
如：由三个下划线开头的私有方法“___PushCdr”就要比同一类中，仅由两个下划线开头的私有方法“__MergeConCall”所完成的功能粒
度更细小、更琐碎；而四个下划线开头的“____CalcCompensate”则比“___PushCdr”完成的功能 更具原子性。</p>
				<p>如果发现类中的功能层数太多（从公有方法到最“原子”的私有方法间，一般不应该超过 7 
				层），那通常反应一个不良的设计。此时请检查这个类的功能是否过于臃肿，已使接口显得不太清晰。另外一个常见的问题是将无需访问该类中
				私有或保护成员的功能定义成了方法。第一个问题可以通过重新划分类层次结构或将一个类分裂为多个类等方法解决。对于第二个问题，由于这些方法无需访问
				受限成员，大多数时候都可以把它们转变成局部函数（放在无名空间或使用“static”前缀定义）。</p>
				<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">
			<font color="#808080">成员函数的下划线后缀命名</font></td><td valign="top" align="left">
			对一些本应该作为保护或私有成员的函数，由于设计方面的其它考虑（例如：灵活性、功能等方面）将其提升为公有成员的，应该在其后面添加与其原本访问控制级别相应的下划线后缀。<p>
			另外，对于其它不推荐直接使用的成员函数（例如：会引起兼容性或可移植性方面问题的函数），也应当在其后面加相应下划线提示。</p>
			<p>例如："ioctl_()", "SetSysOpt_()", "GetSysOpt_()", 
			"PreParser__()" ....</p>
			<p>　</p></td></tr>
			<tr>
				<td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">回调和事件处理函数</font></td><td valign="top" align="left">回调和事件处理函数习惯以单词“On”开头。例如："_OnTimer()", "OnExit()" ....<p>　</p></td>
			</tr>
			<tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">虚函数</font></td><td valign="top" align="left">
				回调函数以外的虚函数习惯以“Do”开头，如："DoRefresh()", "_DoEncryption()" ....<p>　</p></td></tr></tbody></table></div></td></tr></tbody></table><p>　</p></div><h3 align="left"><a name="命名规则_变量">变量</a><br>
		<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table35" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><p align="left">变量应该是程序中使用最多的标识符了，变量的命名规范可能是一套C++命名准则中最重要的部分：</p><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table59" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">变量的命名</td><td valign="top" align="left">变量名由<span style="background-color: rgb(255, 255, 0);">作用域前缀＋类型前缀＋一个或多个单词</span>组成。为便于界定，每个单词的首字母要大写。<p>对于某些用途简单明了的局部变量，也可以使用简化的方式，如：i, j, k, x, y, z ....</p><p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">作用域前缀</td><td valign="top" align="left">作用域前缀标明一个变量的可见范围。作用域可以有如下几种：<div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table60" width="95%" border="0" cellpadding="4"><tbody><tr><td style="border-right-style: solid; border-right-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" width="125" align="left"><b>前缀</b></td><td style="border-left-style: solid; border-left-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" align="left"><b>说明</b></td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left"><font color="#808080"><i>无</i></font></td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">局部变量</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left">m_</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">类的成员变量（member）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left">sm_</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">类的静态成员变量（static member）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left">s_</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">静态变量（static）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left">g_</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">外部全局变量（global）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left">sg_</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">静态全局变量（static global）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="125" align="left">gg_</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">进程或动态链接库间共享的全局变量（global global）</td></tr></tbody></table><p align="left">除非不得已，否则应该尽可能少使用全局变量。</p><p align="left">
			关于全局变量和局部静态变量的依赖性问题和初始化时的线程安全性问题，请参考：<b><a href="http://baiy.cn/doc/cpp/advanced_topic_about_multicore_and_threading.htm">多处理器环境和线程同步的高级话题</a></b> 
			一节</p><p align="left">　</p></div></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">类型前缀</td><td valign="top" align="left">类型前缀标明一个变量的类型，可以有如下几种：<div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table61" width="95%" border="0" cellpadding="4"><tbody><tr><td style="border-right-style: solid; border-right-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" width="125" align="left"><b>前缀</b></td><td style="border-left-style: solid; border-left-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" align="left"><b>说明</b></td></tr><tr><td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" width="124" align="left">n</td><td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" align="left">整型和位域变量（number）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">e</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">枚举型变量（enumeration）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">c</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">字符型变量（char）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">b</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">布尔型变量（bool）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">f</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">浮点型变量（float）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">p</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">指针型变量和迭代子（pointer）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">pfn</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
			指向函数的指针变量或指向函数对象的指针（pointer of function）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
				pm</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
				指向成员的指针（pointer of member）</td></tr>
				<tr>
					<td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">g</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">数组（grid）</td>
				</tr>
				<tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
					fo</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
					函数对象（Function Object）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">i</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">类的实例（instance）<p>对于经常用到的类，也可以定义一些专门的前缀，如：std::string和std::wstring类的前缀可以定义为"st"，std::vector类的前缀可以定义为"v"等等。</p></td></tr></tbody></table><p align="left">类型前缀可以组合使用，例如"gc"表示字符数组，"ppn"表示指向整型的指针的指针等等。</p><p align="left">　</p></div></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">
			数值前缀的特别记法</td><td valign="top" align="left">
			以“n”作为所有整形前缀是由于大多数情况下，编写程序时不需要过多考虑整形的宽度，但在某些场合中，整形宽度是需要特别注意并且仔细加以区分的，这时可使用如下记法代替“n”前缀：<div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table246" width="95%" border="0" cellpadding="4"><tbody><tr><td style="border-right-style: solid; border-right-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" width="125" align="left"><b>前缀</b></td><td style="border-left-style: solid; border-left-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" align="left"><b>说明</b></td></tr><tr><td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" width="124" align="left">
					b</td><td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" align="left">
					字节（8bit，byte）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
						w</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
						字（16bit，word）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
						dw</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
						双字（32bit，double word）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
						qw -或- nn</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
						四字（64bit，quad word）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
						bf</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
						位域（bit field）</td></tr></tbody></table></div><p align="left">
				对浮点型变量也有类似记法如下：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table247" width="95%" border="0" cellpadding="4"><tbody><tr><td style="border-right-style: solid; border-right-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" width="125" align="left"><b>前缀</b></td><td style="border-left-style: solid; border-left-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" align="left"><b>说明</b></td></tr><tr><td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" width="124" align="left">
					f</td><td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" align="left">
					单精度浮点（32bit，float）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
						d</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
						双精度浮点（64bit，double）</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="124" align="left">
						ld</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
						扩展精度浮点（80bit，long double）</td></tr></tbody></table></div>
			<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">推荐的组成形式</font></td><td valign="top" align="left">变量的名字应当使用"<span style="background-color: rgb(255, 255, 0);">名词</span>"或者"<span style="background-color: rgb(255, 255, 0);">形容词＋名词</span>"。例如："nCode", "m_nState"，"nMaxWidth" ....</td></tr></tbody></table></div></td></tr></tbody></table><p align="left">　</p><h3 align="left"><a name="命名规则_常量">常量</a><br>
			<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table64" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><p align="left">C++中引入了对常量的支持，常量的命名规则如下：</p><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table68" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">常量的命名</td><td valign="top" align="left">常量名由<span style="background-color: rgb(255, 255, 0);">类型前缀＋全大写字母</span>组成，单词间通过下划线来界定，如：<font color="#808080" face="Fixedsys">cDELIMITER</font>, <font color="#808080" face="Fixedsys">nMAX_BUFFER</font> ....<p>类型前缀的定义与<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%B1%E4%C1%BF">变量命名规则</a>中的相同。</p></td></tr></tbody></table></div></td></tr></tbody></table></div></div><p align="left">　</p><h3 align="left"><a name="命名规则_枚举、联合、typedef">枚举、联合、typedef</a><br>
		<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table36" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><p align="left">枚举、联合及typedef语句都是定义新类型的简单手段，它们的命名规则为：</p><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table62" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4">
			<tbody><tr>
				<td valign="top" width="181" align="left" bgcolor="#ebebeb">枚举、联合的命名</td><td valign="top" align="left">
				由枚举、联合语句定义的类型名由全大写字母组成，单词间通过下划线来界定，如：<font color="#0000ff" face="Fixedsys">FAR_PROC</font>, <font color="#0000ff" face="Fixedsys">ERROR_TYPE</font> ....</td>
			</tr>
			<tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
				typedef的命名</td><td valign="top" align="left">通常情况下，typedef语句定义的类型名，其命名规范与枚举及联合语句相同，也采用大写字母加下划线的原则。但是在定义一个模板类实例的别名时，为清晰起见，可以考虑酌情使用类的命名原则，例如：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table245" width="95%" border="0" cellpadding="4"><tbody><tr><td bgcolor="#ebebeb">
					<font color="#0000ff" face="Fixedsys">typedef</font><font face="Fixedsys">
					<font color="#0000ff">CWriter</font><font color="#800000">&lt;</font>
					<font color="#0000ff">CSysFile</font> <font color="#800000">
					&gt;</font> <font color="#0000ff">CSysFileWriter</font><font color="#800000">;<br>
					</font></font>
					<font color="#0000ff" face="Fixedsys">typedef</font><font face="Fixedsys">
					<font color="#0000ff">std</font><font color="#800000">::</font><font color="#0000ff">vector</font><font color="#800000">&lt;</font>
					<font color="#0000ff">int</font> <font color="#800000">
					&gt;</font> <font color="#0000ff">VINT</font><font color="#800000">;</font></font></td></tr></tbody></table></div></td></tr></tbody></table></div></td></tr></tbody></table></div><p align="left">　</p><h3 align="left"><a name="命名规则_宏、枚举值">宏、枚举值</a><br>
		<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table37" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table63" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">宏、枚举值的命名</td><td valign="top" align="left">宏和枚举值由全大写字母组成，单词间通过下划线来界定，如：<font color="#ff8000" face="Fixedsys">ERROR_UNKNOWN</font>, <font color="#ff8000" face="Fixedsys">OP_STOP</font> ....</td></tr></tbody></table></div></td></tr></tbody></table></div><p align="left">　</p><h3 align="left"><a name="命名规则_名空间">名空间</a><br>
		<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table38" width="95%" border="0" cellpadding="4"><tbody><tr><td>C++名空间是“类”概念的一种退化（大体相当于只包含静态成员且不能实例化的类）。它的引入为标识符名称提供了更好的层次结构，使标识符看起来更加直观简捷，同时大大降低了名字冲突的可能性。<p>名空间的命名规则包括：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table69" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">名空间的命名</td><td valign="top" align="left">名空间的名称不应该过长，通常都使用缩写的形式来命名。<p>例如，一个图形库可以将其所有外部接口存放在名空间"<font color="#0000ff" face="Fixedsys">GLIB</font>"中，但是将其换成"<font color="#0000ff" face="Fixedsys">GRAPHIC_LIBRARY</font>"就不大合适。</p><p>如果碰到较长的名空间，为了简化程序书写，可以使用：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table70" width="95%" border="0" cellpadding="4"><tbody><tr><td bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">namespace</font> <font color="#0000ff">new_name</font> <font color="#880000">=</font> <font color="#0000ff">old_long_name</font><font color="#880000">; </font></font></td></tr></tbody></table></div><p>语句为其定义一个较短的别名。</p></td></tr></tbody></table></div></td></tr></tbody></table></div></div></td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="代码风格与版式">代码风格与版式</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table17" width="95%" border="0" cellpadding="4"><tbody><tr><td>代码风格的重要性怎么强调都不过分。一段稍长一点的无格式代码基本上就是不可读的。<p>先来看一下这方面的整体原则：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table71" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">空行的使用</td><td valign="top" align="left">空行起着分隔程序段落的作用。空行得体（不过多也不过少）将使程序的布局更加清晰。空行不会浪费内存，虽然打印含有空行的程序是会多消耗一些纸张，但是值得。所以不要舍不得用空行。<ul><li>在每个类声明之后、每个函数定义结束之后都要加<span style="background-color: rgb(255, 255, 0);">2行</span>空行。<br>　</li><li>在一个函数体内，逻揖上密切相关的语句之间不加空行，其它地方应加空行分隔。</li></ul></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">语句与代码行</td><td valign="top" align="left"><ul><li>一行代码只做一件事情，如只定义一个变量，或只写一条语句。这样的代码容易阅读，并且方便于写注释。<br>　</li><li>"if"、"for"、"while"、"do"、"try"、"catch" 等语句自占一行，执行语句不得紧跟其后。不论执行语句有多少都要加 "{ }" 。这样可以防止书写
	和修改代码时出现失误。</li></ul></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">缩进和对齐</td><td valign="top" align="left"><ul><li>程序的分界符 "{" 和 "}" 应独占一行并且位于同一列，同时与引用它们的语句左对齐。<br>　</li><li>"{ }" 之内的代码块在 "{" 右边一个制表符（4个半角空格符）处左对齐。如果出现嵌套的 "{ }"，则使用缩进对齐。<br>　</li><li>如果一条语句会对其后的多条语句产生影响的话，应该只对该语句做半缩进（2个半角空格符），以突出该语句。</li></ul><p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table76" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">void</font> <br><font color="#880000">Function(</font><font color="#0000ff">int</font> <font color="#808080">x</font><font color="#880000">)</font><font color="#808080"><br></font><font color="#880000">{<br>&nbsp; </font><font color="#0000ff">CSessionLock</font><font color="#880000"> </font><font color="#808080">iLock</font><font color="#880000">(</font><font color="#808080">mxLock</font><font color="#880000">);<br></font><br>&nbsp;&nbsp;&nbsp; <font color="#0000ff">for</font> <font color="#880000">(</font>初始化<font color="#880000">;</font> 终止条件<font color="#880000">;</font> 更新<font color="#880000">)</font><br>&nbsp;&nbsp;&nbsp; <font color="#880000">{</font><font color="#0000ff"><br></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><br>&nbsp;&nbsp;&nbsp; <font color="#880000">}<br><br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">try</font><font color="#880000"><br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><font color="#880000"><br>&nbsp;&nbsp;&nbsp; }</font><font color="#0000ff"><br></font><font color="#880000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">catch</font><font color="#880000"> (</font><font color="#0000ff">const</font><font color="#880000"> </font><font color="#0000ff" face="Fixedsys">exception</font><font color="#880000">&amp; </font><font color="#808000">err</font><font color="#880000">)<br>&nbsp;&nbsp;&nbsp; {<br></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><font color="#880000"><br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">catch</font><font color="#880000"> (...)<br>&nbsp;&nbsp;&nbsp; {<br></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><font color="#880000"><br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><br><font color="#880000">}</font></font></td></tr></tbody></table><p>　</p></div></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">最大长度</td><td valign="top" align="left">代码行最大长度宜控制在70至80个字符以内。代码行不要过长，否则眼睛看不过来，也不便于打印
	（2009年更新：随着GUI开发环境和高分宽屏的普及，此规则可以视情况适当放宽）。<p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">长行拆分</td><td valign="top" align="left">长表达式要在低优先级操作符处拆分成新行，操作符放在新行之首（以便突出操作符）。拆分出的新行要进行适当的缩进，使排版整齐，语句可读。<p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table77" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">if</font> <font color="#880000">((</font><font color="#808080">very_longer_variable1</font> <font color="#880000">&gt;=</font> <font color="#808080">very_longer_variable2</font><font color="#880000">)</font><br>&nbsp;&nbsp;&nbsp; <font color="#880000">&amp;&amp; (</font><font color="#808080">very_longer_variable3</font> <font color="#880000">&lt;=</font> <font color="#808080">very_longer_variable4</font><font color="#880000">)</font><br>&nbsp;&nbsp;&nbsp; <font color="#880000">&amp;&amp; (</font><font color="#808080">very_longer_variable5</font> <font color="#880000">&lt;=</font> <font color="#808080">very_longer_variable6</font><font color="#880000">)<br>
&nbsp;&nbsp; )</font><br><font color="#880000">{<br></font>&nbsp;&nbsp;&nbsp; 
<font color="#880000">DoSomething();</font><br><font color="#880000">}</font></font></td></tr></tbody></table><p align="left">　</p></div></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">空格的使用</td><td valign="top" align="left"><ul><li>关
键字之后要留空格。象 "const"、"virtual"、"inline"、"case" 等关键字之后至少要留一个空格，否则无法辨析关键字。象
"if"、"for"、"while"、"catch" 等关键字之后应留一个空格再跟左括号 "("，以突出关键字。<br>　</li><li>函数名之后<span style="background-color: rgb(255, 255, 0);">不要</span>留空格，紧跟左括号 "(" ，以与关键字区别。<br>　</li><li>"(" 向后紧跟。而 ")"、","、";" 向前紧跟，紧跟处不留空格。<br>　</li><li>"," 之后要留空格，如 Function(x, y, z)。如果 ";" 不是一行的结束符号，其后要留空格，如 for (initialization; condition; update)。<br>　</li><li>赋值操作符、比较操作符、算术操作符、逻辑操作符、位域操作符，如"="、"+=" "&gt;="、"&lt;="、"+"、"*"、"%"、"&amp;&amp;"、"||"、"&lt;&lt;", "^" 等二元操作符的前后应当加空格。<br>　</li><li>一元操作符如 "!"、"~"、"++"、"--"、"&amp;"（地址运算符）等前后不加空格。<br>　</li><li>象"[]"、"."、"-&gt;"这类操作符前后不加空格。<br>　</li><li>对于表达式比较长的for、do、while、switch语句和if语句，为了紧凑起见可以适当地去掉一些空格，如for (i=0; i&lt;10; i++)和if ((a&lt;=b) &amp;&amp; (c&lt;=d))</li></ul><p><font face="新宋体">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table78" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">void</font> <font color="#880000">Func1(</font><font color="#0000ff">int</font> <font color="#808080">x</font><font color="#880000">,</font> <font color="#0000ff">int</font> <font color="#808080">y</font><font color="#880000">,</font> <font color="#0000ff">int</font> <font color="#808080">z</font><font color="#880000">);</font>&nbsp;&nbsp;&nbsp; <font color="#008000">// 良好的风格</font><br><font color="#0000ff">void</font> <font color="#880000">Func1</font> <font color="#880000">(</font><font color="#0000ff">int</font> <font color="#808080">x</font><font color="#880000">,</font><font color="#0000ff">int</font> <font color="#808080">y</font><font color="#880000">,</font><font color="#0000ff">int</font> <font color="#808080">z</font><font color="#880000">);</font>&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 不良的风格<br><br>// ===========================================================</font><br><font color="#0000ff">if</font> <font color="#880000">(</font><font color="#808080">year</font> <font color="#880000">&gt;=</font> <font color="#ff0000">2000</font><font color="#880000">)</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 良好的风格</font><br><font color="#0000ff">if</font><font color="#880000">(</font><font color="#808080">year</font><font color="#880000">&gt;=</font><font color="#ff0000">2000</font><font color="#880000">)</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 不良的风格<br>
		</font><br><font color="#0000ff">if</font> <font color="#880000">((</font><font color="#808080">a</font><font color="#880000">&gt;=</font><font color="#808080">b</font><font color="#880000">) &amp;&amp; (</font><font color="#808080">c</font><font color="#880000">&lt;=</font><font color="#808080">d</font><font color="#880000">))</font>&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 良好的风格</font><br><font color="#0000ff">if</font><font color="#880000">(</font><font color="#808080">a</font><font color="#880000">&gt;=</font><font color="#808080">b</font><font color="#880000">&amp;&amp;</font><font color="#808080">c</font><font color="#880000">&lt;=</font><font color="#808080">d</font><font color="#880000">)</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 不良的风格</font><br><font color="#008000"><br>// ===========================================================</font><br><font color="#0000ff">for</font> <font color="#880000">(</font><font color="#808080">i</font><font color="#880000" face="Fixedsys">=</font><font color="#ff0000">0</font><font color="#880000">;</font> <font color="#808080">i</font><font color="#880000">&lt;</font><font color="#ff0000">10</font><font color="#880000">; </font><font color="#808080">i</font><font color="#880000">++)</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 良好的风格</font><br><font color="#0000ff">for</font><font color="#880000">(</font><font color="#808080">i</font><font color="#880000">=</font><font color="#ff0000">0</font><font color="#880000">;</font><font color="#808080">i</font><font color="#880000">&lt;</font><font color="#ff0000">10</font><font color="#880000">;</font><font color="#808080">i</font><font color="#880000">++)</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">// 不良的风格</font><br><font color="#0000ff">for</font> <font color="#880000">(</font><font color="#808080">i</font> <font color="#880000" face="Fixedsys">=</font> <font color="#ff0000">0</font><font color="#880000">;</font> <font color="#808080">I</font> <font color="#880000">&lt;</font> <font color="#ff0000">10</font><font color="#880000">;</font> <font color="#808080">i</font> <font color="#880000">++)</font> <font color="#008000">// 过多的空格</font><br><font color="#008000"><br>// ===========================================================</font><br><font color="#808080">x</font> <font color="#880000">=</font> <font color="#808080">a</font> <font color="#880000">&lt;</font> <font color="#808080">b</font> <font color="#880000">?</font> <font color="#808080">a</font> <font color="#880000">:</font> <font color="#808080">b</font><font color="#880000">;</font>&nbsp;&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp; // 良好的风格</font><br><font color="#808080">x</font><font color="#880000">=</font><font color="#808080">a</font><font color="#880000">&lt;</font><font color="#808080">b</font><font color="#880000">?</font><font color="#808080">a</font><font color="#880000">:</font><font color="#808080">b</font><font color="#880000">;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp; // 不好的风格</font><br><font color="#008000"><br>// ===========================================================</font><br><font color="#0000ff">int</font><font color="#880000">*</font> <font color="#808080">x</font> <font color="#880000">=</font> <font color="#880000">&amp;</font><font color="#808080">y</font><font color="#880000">;</font>&nbsp;&nbsp;&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 良好的风格 </font><br><font color="#0000ff">int</font> <font color="#880000">*</font> <font color="#808080">x</font> <font color="#880000" face="Fixedsys">=</font> <font color="#880000">&amp;</font> <font color="#808080">y</font><font color="#880000">;</font>&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 不良的风格 </font><br><font color="#008000"><br>// ===========================================================</font><br><font color="#808080">array</font><font color="#880000">[</font><font color="#ff0000">5</font><font color="#880000">]</font> <font color="#880000">=</font> <font color="#ff0000">0</font><font color="#880000">;</font>&nbsp;&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 不要写成 array [ 5 ] = 0;</font><br><font color="#808080">a</font><font color="#880000">.Function();</font>&nbsp;&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 不要写成 a . Function();</font><br><font color="#808080">b</font><font color="#880000">-&gt;Function();</font>&nbsp; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 不要写成 b -&gt; Function();</font></font></td></tr></tbody></table><p>　</p></div></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">修饰符的位置</td><td valign="top" align="left">为便于理解，应当将修饰符 "*" 和 "&amp;" 紧靠<span style="background-color: rgb(255, 255, 0);">数据类型</span>。<p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table79" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">char</font><font color="#880000">*</font> <font color="#808080">name</font><font color="#880000">;<br><br></font><font color="#0000ff" face="Fixedsys">int</font><font color="#880000">*</font> <font color="#808080">x</font><font color="#880000">;<br></font><font color="#0000ff" face="Fixedsys">int</font>&nbsp; <font color="#808080">y</font><font color="#880000" face="Fixedsys">;</font>&nbsp;&nbsp;&nbsp; <font color="#008000">// 为避免y被误解为指针，这里必须分行写。<br><br></font><font color="#0000ff">int</font><font color="#880000">*</font><font color="#008000"> </font><font color="#880000">Function(</font><font color="#0000ff" face="Fixedsys">void</font><font color="#880000">* </font><font color="#808080">p</font><font color="#880000">);</font></font></td></tr></tbody></table><p align="left">参见：<a href="#%B4%FA%C2%EB%B7%E7%B8%F1%D3%EB%B0%E6%CA%BD_%B1%E4%C1%BF%A1%A2%B3%A3%C1%BF">变量、常量的风格与版式</a> -&gt; 指针或引用类型的定义和声明</p><p>　</p></div></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">注释</td><td valign="top" align="left"><ul><li>注释的位置应与被描述的代码相邻，可以放在代码的上方或右方，不可放在下方。</li><li>边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。</li><li>注释应当准确、易懂，防止注释有二义性。错误的注释不但无益反而有害。</li><li>当代码比较长，特别是有多重嵌套时，应当在一些段落的结束处加注释，便于阅读。</li></ul></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">与常量的比较</td><td valign="top" align="left">在与宏、常量进行 "==", "!=", "&gt;=", "&lt;=" 等比较运算时，应当将常量写在运算符左边，而变量写在运算符右边。这样可以避免因为偶然写错把比较运算变成了赋值运算的问题。<p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table116" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">if</font> <font color="#880000">(</font><font color="#ff8000">NULL</font> <font color="#880000">==</font> <font color="#808080">p</font><font color="#880000">)&nbsp; </font><font color="#008000">// 如果把 "==" 错打成 "="，编译器就会报错</font><font color="#880000"><br>{<br></font>&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><font color="#880000"><br>}</font></font></td></tr></tbody></table></div><p>　</p></td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb">为增强代码的可读性而定义的宏</td><td valign="top" align="left">以下预定义宏对程序的编译没有任何影响，只为了增加代码的可读性：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table85" width="95%" border="0" cellpadding="4"><tbody><tr><td style="border-right-style: solid; border-right-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" width="128"><b>宏</b></td><td style="border-left-style: solid; border-left-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;"><b>说明</b></td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" width="128">NOTE</td><td style="border-left-style: solid; border-left-width: 1px;">需要注意的代码</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" width="128">TODO</td><td style="border-left-style: solid; border-left-width: 1px;">尚未实现的接口、类、算法等</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" width="128">
	UNDONE</td><td style="border-left-style: solid; border-left-width: 1px;">已取消的接口、类、算法等</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" width="128">FOR_DBG</td><td style="border-left-style: solid; border-left-width: 1px;">标记为调试方便而临时增加的代码</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" width="128">OK</td><td style="border-left-style: solid; border-left-width: 1px;">仅用于调试的标记</td></tr></tbody></table><p align="left">例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table90" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#ff8000">TODO</font> <font color="#0000ff">class</font> <font color="#0000ff">CMyClass</font><font color="#880000">;<br></font><font color="#ff8000">TODO</font> <font color="#0000ff">void</font> <font color="#880000">Function(</font><font color="#0000ff">void</font><font color="#880000">);<br><br></font><font color="#ff8000" face="Fixedsys">FOR_DBG</font> <font color="#808080">cout</font> <font color="#880000">&lt;&lt;</font> <font color="#008080">"..."</font><font color="#880000">;</font></font></td></tr></tbody></table></div></div></td></tr></tbody></table></div><p>　</p><h3><a name="代码风格与版式_类/结构">类/结构</a><br>
<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table45" width="95%" border="0" cellpadding="4"><tbody><tr><td>类是C++中最重要也是使用频率最高的新特性之一。类的版式好坏将极大地影响代码品质。<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table80" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">注释头与类声明</td><td valign="top" align="left">与文件一样，每个类应当有一个注释头用来说明该类的各个方面。<p>类声明换行紧跟在注释头后面，"class" 关键字由行首开始书写，后跟类名称。界定符 "{" 和 "};" 应独占一行，并与 "class" 关键字左
		对齐。</p><div align="center">
		<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table95" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">/*! @class<br>********************************************************************************<br>&lt;PRE&gt;<br>类名称&nbsp;&nbsp; : CXXX<br>功能&nbsp;&nbsp;&nbsp;&nbsp; : &lt;简要说明该类所完成的功能&gt;<br>异常类&nbsp;&nbsp; : &lt;属于该类的异常类（如果有的话）&gt; <br>--------------------------------------------------------------------------------<br>备注&nbsp;&nbsp;&nbsp;&nbsp; : &lt;使用该类时需要注意的问题（如果有的话）&gt; <br>典型用法 : &lt;如果该类的使用方法较复杂或特殊，给出典型的代码例子&gt; <br>--------------------------------------------------------------------------------<br>作者&nbsp;&nbsp;&nbsp;&nbsp; : &lt;xxx&gt;, 
	[yyy], [zzz] ...（作者和逗号分割的修改者列表）<br>&lt;/PRE&gt;<br>*******************************************************************************/<br></font><font color="#0000ff">class</font><font color="#008000"> </font><font color="#0000ff">CXXX</font><font color="#008000"><br></font><font color="#880000">{<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#880000"><br>};</font></font></td></tr></tbody></table></div><p>对于功能明显的简单类（接口小于10个），也可以使用简单的单行注释头：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table96" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#008000" face="Fixedsys">//! &lt;简要说明该类所完成的功能&gt;</font><font face="Fixedsys"><font color="#008000"><br></font><font color="#0000ff">class</font><font color="#008000"> </font><font color="#0000ff">CXXX</font><font color="#008000"><br></font><font color="#880000">{<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#880000"><br>};</font></font></td></tr></tbody></table><p>　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">继承</td><td valign="top" align="left">基类直接跟在类名称之后，不换行，访问说明符（public, private, 或protected）不可省略。如：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table82" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">class</font><font color="#008000"> </font><font color="#0000ff">CXXX : public CAAA, private CBBB</font><font color="#008000"><br></font><font color="#880000">{<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#880000"><br>};</font></font></td></tr></tbody></table><p>　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">以行为为中心</td><td valign="top" align="left">没人喜欢上来就看到一大堆私有数据，大多数用户关心的是类的接口与其提供的服务，而不是其实现。<p>所以应当将公有的定义和成员放在类声明的最前面，保护的放在中间，而私有的摆在最后。</p><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">访问说明符</td><td valign="top" align="left">访问说明符（public, private, 或protected）应该独占一行，并与类声明中的‘class’关键字左对齐。<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">类成员的声明版式</td><td valign="top" align="left">对于比较复杂（成员多于20个）的类，其成员必须分类声明。<p>每类成员的声明由访问说明符（public, private, 或protected）+ 全行注释开始。注释不满全行（80个半角字符）的，由 "/" 字符补齐，最后一个 "/" 字符与注释间要留一个半角空格符。</p><p>如果一类声明中有很多组功能不同的成员，还应该用<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E8%AF%AD%E5%8F%A5/%E5%87%BD%E6%95%B0%E7%BB%84">分组注释</a>将其分组。分组注释也要与 "class" 关键字对齐。</p><p>每个成员的声明都应该由 "class" 关键字开始向右缩进一个制表符（4个半角空格符），成员之间左对齐。</p><p>例如：</p><div align="center">
		<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table107" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">class</font><font color="#008000"> </font><font color="#0000ff">CXXX</font><font color="#008000"><br></font><font color="#880000">{</font><font color="#008000"><br></font><font color="#0000ff">public</font><font color="#880000">:</font><font color="#008000"><br>/////////////////////////////////////////////////////////////////////// 类型定义<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">typedef</font><font color="#008000"> </font><font color="#0000ff">vector</font><font color="#880000">&lt;</font><font color="#0000ff">string</font><font color="#880000">&gt;</font><font color="#008000"> </font><font color="#0000ff">VSTR</font><font color="#880000">;<br><br></font><font color="#0000ff">public</font><font color="#880000">:</font><font color="#008000"><br>///////////////////////////////////////////////////////////// 构造、析构、初始化<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CXXX</font><font color="#880000">();<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#880000">~CXXX();<br><br></font><font color="#0000ff">public</font><font color="#880000">:</font><font color="#008000"><br>/////////////////////////////////////////////////////////////////////// 公用方法<br><br>// [[ 功能组1<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">void</font><font color="#008000"> </font><font color="#880000">Function1(</font><font color="#0000ff">void</font><font color="#880000">)</font><font color="#008000"> </font><font color="#0000ff">const</font><font color="#880000">;<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">long</font><font color="#008000"> </font><font color="#880000">Function2(</font><font color="#ff8000">IN</font><font color="#008000"> </font><font color="#0000ff">int</font><font color="#008000"> </font><font color="#808080">n</font><font color="#880000">);<br></font><font color="#008000">// ]] 功能组1<br><br>// [[ 功能组2<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">void</font><font color="#008000"> </font><font color="#880000">Function3(</font><font color="#0000ff">void</font><font color="#880000">)</font><font color="#008000"> </font><font color="#0000ff">const</font><font color="#880000">;<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">bool</font><font color="#008000"> </font><font color="#880000">Function4(</font><font color="#ff8000">OUT</font><font color="#008000"> </font><font color="#0000ff">int</font><font color="#880000">&amp;</font><font color="#008000"> </font><font color="#808080">n</font><font color="#880000">);<br></font><font color="#008000">// ]] 功能组2<br><br></font><font color="#0000ff">private</font><font color="#880000">:</font><font color="#008000"><br>/////////////////////////////////////////////////////////////////////////// 属性<br>&nbsp;&nbsp;&nbsp; // ...<br><br></font><font color="#0000ff">private</font><font color="#880000">:</font><font color="#008000"><br>///////////////////////////////////////////////////////////////////// 禁用的方法<br>&nbsp;&nbsp;&nbsp; // 禁止复制<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff" face="Fixedsys">CXXX</font><font color="#880000">(</font><font color="#ff8000">IN</font><font color="#008000"> </font><font color="#0000ff">const</font><font color="#008000"> </font><font color="#0000ff">CXXX</font><font color="#880000">&amp;</font><font color="#008000"> </font><font color="#808080">rhs</font><font color="#880000">);<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CXXX</font><font color="#880000">&amp;</font><font color="#008000"> </font><font color="#0000ff">operator</font><font color="#880000">=(</font><font color="#ff8000">IN</font><font color="#008000"> </font><font color="#0000ff">const</font><font color="#008000"> </font><font color="#0000ff">CXXX</font><font color="#880000">&amp;</font><font color="#008000"> </font><font color="#808080">rhs</font><font color="#880000">);<br>};</font></font></td></tr></tbody></table></div><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">正确地使用const和mutable</td><td valign="top" align="left">把不改变对象逻辑状态的成员都标记为const成员不仅有利于用户对成员的理解，更可以最大化对象使用方式的灵活性及合理性（比如通过const指针或const引用的形式传递一个对象）。<p>如果某个属性的改变并不影响该对象逻辑上的状态，而且这个属性需要在const方法中被改变，则该属性应该标记为 "mutable"。</p><p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table84" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">class</font><font color="#008000"> </font><font color="#0000ff">CString</font><font color="#008000"><br></font><font color="#880000">{</font><font color="#008000"><br></font><font color="#0000ff">public</font><font color="#880000">:<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">//! 查找一个子串，find()不会改变字符串的值所以为const函数<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">int</font><font color="#008000"> </font><font color="#880000">find(</font><font color="#ff8000">IN</font><font color="#0000ff"> const CString</font><font color="#880000">&amp;</font><font color="#0000ff"> </font><font color="#808080">str</font><font color="#880000">)</font><font color="#008000"> </font><font color="#0000ff">const</font><font color="#880000">;<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; // ...<br><br></font><font color="#0000ff">private</font><font color="#880000">:<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// 最后一次错误值，改动这个值不会影响对象的逻辑状态，<br>&nbsp;&nbsp;&nbsp; // 像find()这样的const函数也可能修改这个值</font><font color="#880000"><br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">mutable</font><font color="#008000"> </font><font color="#0000ff">int</font><font color="#008000"> </font><font color="#808080">m_nLastError</font><font color="#880000">; <br></font><font color="#008000">&nbsp;&nbsp;&nbsp; // ...</font></font><font color="#880000" face="Fixedsys"><br>};</font></td></tr></tbody></table>
	<p align="left">也就是说，应当尽量使所有逻辑上只读的操作成为const方法，然后使用mutable解决那些存在逻辑冲突的属性。</p><p align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">嵌套的类声明</td><td valign="top" align="left">在相应的逻辑关系确实存在时，类声明可以嵌套。嵌套类可以使用简单的单行注释头：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table93" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#008000" face="Fixedsys">// ...</font><font face="Fixedsys"><font color="#0000ff"><br>
			class</font><font color="#008000"> </font><font color="#0000ff">CXXX</font><font color="#008000"><br></font><font color="#880000">{<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">//! 嵌套类说明</font><font color="#880000"><br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">calss CYYY<br>&nbsp;&nbsp;&nbsp; </font><font color="#880000">{<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#0000ff"><br>&nbsp;&nbsp;&nbsp; </font><font color="#880000" face="Fixedsys">};<br>};</font></font></td></tr></tbody></table><p>　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">初始化列表</td><td valign="top" align="left">应当尽可能通过构造函数的初始化列表来初始化成员和基类。初始化列表至少独占一行，并且与构造函数的定义保持一个制表符（4个半角空格）的缩进。<p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table114" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">CXXX</font><font color="#880000">::</font><font color="#0000ff">CXXXX</font><font color="#880000">(</font><font color="#ff8000">IN</font><font color="#0000ff"> int </font><font color="#808080">nA</font><font color="#880000">,</font><font color="#0000ff"> </font><font color="#ff8000">IN</font><font color="#0000ff"> bool </font><font color="#808080">bB</font><font color="#880000">)<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#880000">:</font><font color="#008000"> </font><font color="#808080">m_nA</font><font color="#880000">(</font><font color="#808080">nA</font><font color="#880000">),</font><font color="#008000"> </font><font color="#808080">m_bB</font><font color="#880000">(</font><font color="#808080">bB</font><font color="#880000">)<br>{<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#880000" face="Fixedsys"><br>};</font></font></td></tr></tbody></table><p align="left">　</p></div><p>初始化列表的书写顺序应当与对象的构造顺序一致，即：先按照声明顺序写基类初始化，再按照声明顺序写成员初始化。</p><p>如果一个成员 "a" 需要使用另一个成员 "b" 来初始化，则 "b" 必须在 "a" 之前声明，否则将会产生运行时错误（有些编译器会给出警告）。</p><p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table149" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#008000" face="Fixedsys">// ...</font><font face="Fixedsys"><font color="#0000ff"><br><br>class CXXXX </font><font color="#880000">:</font><font color="#0000ff"> public CAA</font><font color="#880000">,</font><font color="#0000ff"> public CBB</font><font color="#880000"><br>{<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#0000ff"><br>&nbsp;&nbsp;&nbsp; CYY </font><font color="#808080">m_iA</font><font color="#880000">;<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; CZZ </font><font color="#808080">m_iB</font><font color="#880000">;&nbsp; </font><font color="#008000">// m_iA必须在m_iB之前声明</font><font color="#880000"><br>};<br><br><br></font><font color="#0000ff">CXXX</font><font color="#880000">::</font><font color="#0000ff">CXXXX</font><font color="#880000">(</font><font color="#ff8000">IN</font><font color="#0000ff"> int </font><font color="#808080">nA</font><font color="#880000">,</font><font color="#0000ff"> </font><font color="#ff8000">IN</font><font color="#0000ff"> int </font><font color="#808080">nB</font><font color="#880000">,</font><font color="#0000ff"> </font><font color="#ff8000">IN</font><font color="#0000ff"> bool </font><font color="#808080">bC</font><font color="#880000">)<br></font><font color="#008000">&nbsp;&nbsp;&nbsp; </font><font color="#880000">:</font><font color="#008000"> </font><font color="#0000ff">CAA</font><font color="#880000">(</font><font color="#808080">nA</font><font color="#880000">),</font><font color="#808080"> </font><font color="#0000ff">CBB</font><font color="#880000">(</font><font color="#808080">nB</font><font color="#880000">),</font><font color="#808080"> m_iA</font><font color="#880000">(</font><font color="#808080">bC</font><font color="#880000">),</font><font color="#008000"> </font><font color="#808080">m_iB</font><font color="#880000">(</font><font color="#808080">m_iA</font><font color="#880000">) </font><font color="#008000">// 先基类，后成员，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// 分别按照声明顺序书写</font><font color="#880000"><br>{<br>&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#880000" face="Fixedsys"><br>};</font></font></td></tr></tbody></table></div><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font color="#808080">内联函数的实现体</font></td><td valign="top" align="left">定义在类声明之中的函数将自动成为内联函数。但为了使类的声明更为清晰明了，应尽量避免直接在声明中直接定义成员函数的编程风格。鼓励使用 "inline" 关键字将内联函数放在类声明的外部定义。</td></tr></tbody></table><p align="left">关于类声明的例子，请参见：<a href="http://baiy.cn/doc/cpp/x_class_style.htm">类/结构的风格与版式例子</a></p><p align="left">关于类声明的模板，请参见：<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E6%A0%87%E5%87%86%E7%B1%BB%E6%B3%A8%E9%87%8A">类声明模板</a></p></div></td></tr></tbody></table><p align="left">　</p><h3 align="left"><a name="代码风格与版式_函数">函数</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table46" width="95%" border="0" cellpadding="4"><tbody><tr><td>函数是程序执行的最小单位，任何一个有效的C/C++程序都少不了函数。<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table88" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">函数原型</td><td valign="top" align="left">函数原型的格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table98" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys">[存储类] 返回值类型<br>[名空间或类::]函数名(参数列表) [const说明符] [异常过滤器]</font></td></tr></tbody></table><p align="left">例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table99" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: blue;" lang="EN-US">static</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#0000ff"><span style="font-size: 12pt;" lang="EN-US">inline</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">void<br></span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Function1</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)</span><span style="font-size: 12pt; color: blue;" lang="EN-US"><br><br>int<br>CSem</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Function2</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">char</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">* </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pcName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">) </span><span style="font-size: 12pt; color: blue;" lang="EN-US">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">throw</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: blue;" lang="EN-US">Exp</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)</span></font></p></td></tr></tbody></table><p align="left">其中：</p><ul><li><p align="left">以 "[ ]" 括住的为可选项目。</p></li><li><p align="left">除了构造/析构函数及类型转换操作符外，"<font face="Fixedsys">返回值类型</font>" 和 "参数列表" 项不可省略（可以为 "void"）。</p></li><li><p align="left">"const说明符" 仅用于成员函数中
			。</p></li><li><p align="left">"<font face="Fixedsys">存储类</font>", "参数列表" 和 "异常过滤器" 的说明见下文
			。</p></li></ul></div></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">函数声明</td><td valign="top" align="left">函数声明的格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table100" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">//! 函数功能简单说明（可选）</font><br>函数原型<font color="#880000">;</font></font></td></tr></tbody></table><p align="left">例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table101" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#008000" face="Fixedsys">//! 执行某某操作</font><font face="Fixedsys"><span style="font-size: 12pt; color: blue;" lang="EN-US"><br>static</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">void<br></span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);</span></font></td></tr></tbody></table><p align="left">函数声明和其它代码间要有空行分割。</p><p align="left">声明类的成员函数时，为了紧凑，<font face="Fixedsys">返回值类型和</font>函数名之间不用换行，也可以适当减少声明间的空行。</p><p>　</p></div></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">函数定义</td><td valign="top" align="left">函数定义使用如下格式：<br>　<div align="center">
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table102" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#008000" face="Fixedsys">/*! @function<br>********************************************************************************<br>&lt;PRE&gt;<br>函数名&nbsp;&nbsp; : &lt;函数名&gt;<br>功能&nbsp;&nbsp;&nbsp;&nbsp; : &lt;函数实现功能&gt; <br>参数&nbsp;&nbsp;&nbsp;&nbsp; : &lt;参数类表及说明（如果有的话），格式为：&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [IN|OUT] 参数1 : 参数说明<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [IN|OUT] 参数2 : 参数说明<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>返回值&nbsp;&nbsp; : &lt;函数返回值的意义（如果有的话）&gt;<br>抛出异常 : &lt;可能抛出的异常及其说明（如果有的话），格式为：&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类型1 : 说明<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类型2 : 说明<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>--------------------------------------------------------------------------------<br>
		复杂度&nbsp;&nbsp; : &lt;描述函数的复杂度/开销（可选）&gt;<br>备注&nbsp;&nbsp;&nbsp;&nbsp; : &lt;其它注意事项（如果有的话）&gt; <br>典型用法 : &lt;如果该函数的使用方法较复杂或特殊，给出典型的代码例子&gt; <br>--------------------------------------------------------------------------------<br>作者&nbsp;&nbsp;&nbsp;&nbsp; : &lt;xxx&gt;, 
		[yyy], [zzz] ...（作者和逗号分割的修改者列表）<br>&lt;/PRE&gt;<br>*******************************************************************************/<br></font><font face="Fixedsys">函数原型</font><font color="#008000" face="Fixedsys"><br></font><font color="#880000" face="Fixedsys">{</font><font color="#008000" face="Fixedsys"><br>&nbsp;&nbsp;&nbsp; // ...<br></font><font color="#880000" face="Fixedsys">}</font></td></tr></tbody></table>
			</div>
			<p>对于返回值、参数意义都很明确简单函数（代码不超过20行），也可以使用单行函数头：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table103" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#008000" face="Fixedsys">//! 函数实现功能<br></font><font face="Fixedsys">函数原型</font><font color="#008000" face="Fixedsys"><br></font><font color="#880000" face="Fixedsys">{</font><font color="#008000" face="Fixedsys"><br>&nbsp;&nbsp;&nbsp; // ...<br></font><font color="#880000" face="Fixedsys">}</font></td></tr></tbody></table><p align="left">函数定义和其它代码之间至少分开2行空行。</p><p>　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">参数描述宏</td><td valign="top" align="left">以下预定义宏对程序的编译没有任何影响，只为了增强对参数的理解：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table97" width="95%" border="0" cellpadding="4"><tbody><tr><td style="border-right-style: solid; border-right-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" width="128" align="left"><b>宏</b></td><td style="border-left-style: solid; border-left-width: 1px; border-bottom-style: solid; border-bottom-width: 1px;" valign="top" align="left"><b>说明</b></td></tr><tr><td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" width="128" align="left">IN</td><td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px;" valign="top" align="left">输入参数</td></tr>
			<tr>
				<td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">OUT</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">输出参数</td>
			</tr>
			<tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">
				DUMMY</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
				哑元参数－不使用参数的值，仅为帮助函数重载解析等目的而设置的参数</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">OPTIONAL</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">可选参数－通常指可以为NULL的指针参数，带默认值的参数不需要这样标明</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">RESERVED</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
			保留参数－这个参数当前未被支持，留待以后扩展；或者该参数为内部使用，用户无需关心</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">OWNER</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">获得参数的所有权，调用者不再负责销毁实参指定的对象；如果用来修饰返回值，则表示调用者获得返回值的所有权，并负责将其销毁</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">UNUSED</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">标明这个参数在此版本中已不再使用</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">CHANGED</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">参数类型或用途与较早版本相比发生了变化</td></tr><tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">ADDED</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">新增的参数</td></tr>
			<tr>
				<td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">NOTE</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">需要注意的参数－参数意义发生变化或者与习惯用法不同</td>
			</tr>
			<tr><td style="border-right-style: solid; border-right-width: 1px;" valign="top" width="128" align="left">
				WRKBUF</td><td style="border-left-style: solid; border-left-width: 1px;" valign="top" align="left">
				工作缓冲区－为避免频繁分配临时资源而传入的临时工作区</td></tr></tbody></table><p align="left">其中：</p><ul><li><p align="left">除了空参数 "void" 
				和哑元参数以外，每个参数左侧都必须有 "IN" 和/或 "OUT" 修饰。</p></li><li><p align="left">既输入又输出的参数应记为："IN OUT"，而不是 "OUT IN"。</p></li><li><p align="left">IN/OUT的左侧还可以根据需要加入一个或多个上表中列出的其它宏
				。</p></li></ul><p align="left">参数描述宏的使用思想是：只要一个描述宏可以用在指定参数上（即：对这个参数来说，用这个描述宏修饰它是贴切的），那么就应当使用它。</p><p align="left">也就是说，应该把能用的描述宏都用上，以期尽量具体地描述一个参数
			的作用和用法等信息。</p><p align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font face="Fixedsys">参数列表</font></td><td valign="top" align="left">参数列表的格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table106" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">参数描述宏1 参数类型1 参数1, 参数描述宏2 参数类型2 参数2, ...</td></tr></tbody></table></div><p align="left">例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table105" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#ff8000">IN</font> <font color="#0000ff">const int</font> <font color="#808080">nCode</font><font color="#880000">,</font> <font color="#ff8000">OUT</font> <font color="#0000ff">string</font><font color="#880000">&amp;</font> <font color="#808080">nName<br></font><br><font color="#ff8000">OWNER</font> <font color="#ff8000">IN</font> <font color="#0000ff">CDatabase</font><font color="#880000">*</font> <font color="#808080">piDB</font>, <font color="#ff8000">OPTIONAL</font> <font color="#ff8000">IN OUT</font> <font color="#0000ff">int</font><font color="#880000">*</font> <font color="#808080">pnRecordCount</font> <font color="#880000">=</font> <font color="#ff8000">NULL<br></font><br><font color="#ff8000">IN</font> <font color="#ff8000">OUT</font> <font color="#0000ff" face="Fixedsys">string</font><font color="#880000" face="Fixedsys">&amp;</font> <font color="#808080">stRuleList</font><font color="#880000">,</font> <font color="#ff8000">RESERVED</font> <font color="#ff8000" face="Fixedsys">IN</font> <font color="#0000ff">int</font> <font color="#808080" face="Fixedsys">nOperate</font> <font color="#880000">=</font> <font color="#ff0000">0<br></font><br>... </font></td></tr></tbody></table><p align="left">其中：</p><ul><li><p align="left">"参数描述宏" 见上文</p></li><li><p align="left">参数命名规范与<a href="#%C3%FC%C3%FB%B9%E6%D4%F2_%B1%E4%C1%BF">变量的命名规范</a>相同</p></li></ul></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb"><font face="Fixedsys">存储类</font></td><td valign="top" align="left">"extern", "static", "inline" 等函数<font face="Fixedsys">存储类说明</font>应该在声明和定义中一致并且显式地使用。不允许隐式地使用一个类型声明，也不允许一个类型声明仅存在于函数的声明或定义中。<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">成员函数的<font face="Fixedsys">存储类</font></td><td valign="top" align="left">由于C++语言的限制，类中成员函数的 "static", "virtual", "explicit" 等<font face="Fixedsys">存储类说明不允许出现在函数定义中。</font><p><font face="Fixedsys">但是为了明确起见，这些存储类应以注释的形式在相应的成员定义中给出。</font></p><p><font face="Fixedsys">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table108" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">/*virtual*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">CThread</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: blue;" lang="EN-US">EXITCODE<br>CSrvCtl</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: blue;" lang="EN-US">CWrkTrd</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Entry</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>{<br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">&nbsp;&nbsp;&nbsp; // ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span><span style="font-size: 12pt; color: green;" lang="EN-US"><br><br>/*static*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">inline void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US"><br>stringEx</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">regex_free</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">OUT</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">*&amp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pRegEx</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>{<br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">&nbsp;&nbsp;&nbsp; // ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></p></td></tr></tbody></table><p class="MsoNormal" style="" align="left">特别地，为缩短声明的长度，"inline" <font face="Fixedsys">关键字可以在成员函数声明中省略。</font></p><p class="MsoNormal" style="" align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">默认参数</td><td valign="top" align="left">类似地，参数的默认值只能出现在函数声明中，<font face="Fixedsys">但是为了明确起见，这些默认值应以注释的形式在定义中给出。</font><p><font face="Fixedsys">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table109" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US"><br>stringEx</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">regex_find</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">OUT</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">VREGEXRESULT</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&amp; </span><span style="color: rgb(128, 128, 128);" lang="en-us">v</span><span style="font-size: 12pt; color: gray;" lang="EN-US">Result</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">stringEx</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">stRegEx</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">size_t</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">nIndex</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">&nbsp; /*= 0*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">size_t</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nStartPos</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">/*= 0*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">bNoCase</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">/*= false*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">&nbsp;bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bNewLine</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">/*= true*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">bExtended</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">/*= true*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bNotBOL</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">&nbsp; /*= false*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">&nbsp;bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">bNotEOL</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">&nbsp; /*= false*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">bUsePerlStyle</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: green;" lang="EN-US">/*= false*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">) </span><span style="font-size: 12pt; color: blue;" lang="EN-US">const<br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">{<br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">&nbsp;&nbsp;&nbsp; // ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></p></td></tr></tbody></table><p class="MsoNormal" style="" align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">异常过滤器</td><td valign="top" align="left">对于任何可能抛出异常的函数，必须在其声明和定义中显式地指定异常过滤器，并在过滤器中列举该函数可能抛出的异常。<p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table112" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><span style="font-size: 12pt; color: blue;" lang="EN-US">int<br></span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">char</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">* </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pcName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">) </span><span style="font-size: 12pt; color: blue;" lang="EN-US">throw</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: blue;" lang="EN-US">byExp</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span style="font-size: 12pt; color: blue;" lang="EN-US">exception</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);</span></font></td></tr></tbody></table>
			<p align="left">如果一个函数本身及其<b>直接</b>调用的函数不会显式抛出异常（没有指定异常过滤器），那么该函数可以省略异过滤器。</p><p align="left">特别地：如果一个函数内部显式地捕获了任何可能的异常（例如：使用了 
			"catch (...)" ），并且保证不抛出任何异常，那么应该在其声明和定义中显式地指定一个空异常过滤器："throw()"。</p><p align="left">例如：</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table251" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><span style="font-size: 12pt; color: blue;" lang="EN-US">int<br></span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">
					const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">
					char</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">* </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pcName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">) </span><span style="font-size: 12pt; color: blue;" lang="EN-US">throw</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span></font><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">);</span></font></td></tr></tbody></table>
				<p align="left">特别地：进程入口函数（"main()"）<b>不</b>应当使用异常过滤器。</p></div>
			<p align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">代码段注释</td><td valign="top" align="left">如果函数体中的代码较长，应该根据功能不同将其分段。代码段间以空行分离，并且每段代码都以<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E8%AF%AD%E5%8F%A5%E5%9D%97">代码段分割注释</a>作为开始。<p>例如：</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table113" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: blue;">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br></span><span style="font-size: 12pt; color: blue;">CXXX</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::Function(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);">IN</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">* </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pmodAddr</span><font color="#880000"><span style="font-size: 12pt;" lang="EN-US">)</span></font><span style="font-size: 12pt; color: gray;" lang="EN-US"><br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">{<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">NULL</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> == </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pmodAddr</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>
&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">return</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br>
&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; { </span><span style="font-size: 12pt; color: blue;" lang="EN-US">CSessionLock</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(128, 128, 128);" lang="EN-US">iLock</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="color: rgb(128, 128, 128);" lang="en-us">mx</span><span style="font-size: 12pt; color: gray;" lang="EN-US">Lock</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// =====================================================================<br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: green;" lang="EN-US">// = </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">判断指定模块是不是刚刚被装入，由于在</span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">NT</span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">系列平台中，“</span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">A</span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">”系列函数都是<br></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// = </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">由“</span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">W</span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">”系列函数实现的。 所以可能会有一次</span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">LoadLibrary</span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">产生多次本函数调<br></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// = </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">用的情况。为了增加效率，特设此静态变量判断上次调用是否与本次相同。<br></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">static</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">PVOID</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pLastLoadedModule</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> = </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">NULL</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: gray;" lang="EN-US">pLastLoadedModule</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> == </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pmodAddr</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: blue;" lang="EN-US">return</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">相同，忽略这次调用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pLastLoadedModule</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> = </span><span style="font-size: 12pt; color: gray;" lang="EN-US">pmodAddr</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// =====================================================================<br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// = </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">检查这个模块是否在旁路模块表中<br></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">stringEx</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">stModName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (!</span><span style="font-size: 12pt; color: blue;" lang="EN-US">BaiY_IMP</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">GetModuleNameByAddress</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: gray;" lang="EN-US">pmodAddr</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span style="font-size: 12pt; color: gray;" lang="EN-US">stModName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: blue;" lang="EN-US">return</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br></span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}<br>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: blue;" lang="EN-US">CHookProc</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: gray;" lang="EN-US">sm_sstByPassModTbl</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">.</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">find</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: gray;" lang="EN-US">stModName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; != </span><span style="font-size: 12pt; color: blue;" lang="EN-US">CHookProc</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: gray;" lang="EN-US">sm_sstByPassModTbl</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">.</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">end</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">return</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br></span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: green;" lang="EN-US">// =====================================================================<br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// = </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">在这个模块中</span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">HOOK</span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">所有存在于</span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">HOOK</span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">函数表中的函数<br></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">PROCTBL</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><span style="font-size: 12pt; color: blue;" lang="EN-US">iterator</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">p</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span>
		<span style="font-size: 12pt; color: gray;">=</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">sm_iProcTbl</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">.</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">begin</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;" lang="EN-US">for</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">p</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">!=</span><span style="font-size: 12pt; color: gray;" lang="EN-US">sm_iProcTbl</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">.</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">end</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(); ++</span><span style="font-size: 12pt; color: gray;" lang="EN-US">p</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">p</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">-&gt;</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">HookOneModule</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: gray;" lang="EN-US">pmodAddr</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br></span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}<br>&nbsp;&nbsp;&nbsp; } </span><span style="font-size: 12pt; color: green;" lang="EN-US">// </span><span style="color: rgb(0, 128, 0);">SessionLock</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></p></td></tr></tbody></table></div><p>明显地，如果需要反复用到一段代码的话，这段代码就应当作为一个函数实现。</p><p>当一个函数过长（超过100行）或代码的意图不明确时，为了便于阅读和理解，也应当将其中的一些代码段实现为单独的函数。</p><p>
				特别地，对由于如加密及性能优化等特殊原因无法提取为一个单独函数的代码段，应当使用<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E8%AF%AD%E5%8F%A5%E5%9D%97">特别代码段注释</a>显式分割。当然，类似情况应当尽量使用内联函数或编译器提供的强制性内联函数代替。</p><p>例如：</p><div align="center">
					<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table252" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: blue;">void</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br></span><span style="font-size: 12pt; color: blue;">CXXX</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::Function(</span><span style="font-size: 12pt; color: blue;">void</span><font color="#880000"><span style="font-size: 12pt;" lang="EN-US">)</span></font><span style="font-size: 12pt; color: gray;" lang="EN-US"><br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">{<br>&nbsp;&nbsp;&nbsp; </span>
						<font color="#008000">
						<span style="font-size: 12pt;" lang="EN-US">// ...</span></font></font><font color="#008000" face="Fixedsys"><br>
						<br>
&nbsp;&nbsp;&nbsp; // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>
&nbsp;&nbsp;&nbsp; // @@ 获取首网卡的 MAC 地址</font><font face="Fixedsys"><font color="#0000ff"><br>
&nbsp;&nbsp;&nbsp; typedef</font> <font color="#0000ff">CTmpHandle</font><font color="#800000">&lt;</font><font color="#0000ff">IP_ADAPTER_INFO</font><font color="#800000">,</font>
						<font color="#0000ff">FreeDeletor</font><font color="#800000">&lt;</font><font color="#0000ff">IP_ADAPTER_INFO</font><font color="#800000">&gt;</font>
						<font color="#800000">&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;<font color="#0000ff">THADAPTERINFO</font></font><font color="#800000" face="Fixedsys">;</font><font face="Fixedsys"><br>
						<br>
&nbsp;&nbsp;&nbsp; <font color="#0000ff">byteEx</font>
						<span style="font-size: 12pt; color: gray;">btAddr</span></font><font color="#800000" face="Fixedsys">;</font><font face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; <font color="#0000ff">THADAPTERINFO</font>
						<span style="font-size: 12pt; color: gray;">
						thAdapterInfo</span></font><font color="#800000" face="Fixedsys">;</font><font face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; <span style="font-size: 12pt; color: gray;">thAdapterInfo</span>
						<font color="#800000">=</font> <font color="#800000">(</font><font color="#0000ff">IP_ADAPTER_INFO</font><font color="#800000">*)</font>
						<span style="font-size: 12pt; color: maroon;">malloc</span><font color="#800000">(</font><font color="#0000ff">sizeof</font><font color="#800000">(</font><font color="#0000ff">IP_ADAPTER_INFO</font></font><font color="#800000" face="Fixedsys">));</font><font face="Fixedsys"><br>
						<br>
&nbsp;&nbsp;&nbsp; <font color="#0000ff">ULONG</font>
						<span style="font-size: 12pt; color: gray;">ulOutBufLen</span>
						<font color="#800000">=</font> <font color="#0000ff">
						sizeof</font><font color="#800000">(</font><font color="#0000ff">IP_ADAPTER_INFO</font></font><font color="#800000" face="Fixedsys">);</font><font color="#008000" face="Fixedsys"><br>
						<br>
&nbsp;&nbsp;&nbsp; // Make an initial call to GetAdaptersInfo to get<br>
&nbsp;&nbsp;&nbsp; // the necessary size into the ulOutBufLen variable</font><font face="Fixedsys"><font color="#0000ff"><br>
&nbsp;&nbsp;&nbsp; if</font> <font color="#800000">(</font><span style="font-size: 12pt; color: rgb(255, 128, 0);">ERROR_SUCCESS</span>
						<font color="#800000">!=</font> <font color="#800000">::</font><span style="font-size: 12pt; color: maroon;">GetAdaptersInfo</span><font color="#800000">(</font><span style="font-size: 12pt; color: gray;">thAdapterInfo</span><font color="#800000">,</font>
						<font color="#800000">&amp;</font><span style="font-size: 12pt; color: gray;">ulOutBufLen</span><font color="#800000">))</font>
						</font><font color="#800000" face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; {</font><font face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
						<span style="font-size: 12pt; color: gray;">
						thAdapterInfo</span> <font color="#800000">=</font>
						<font color="#800000">(</font><font color="#0000ff">IP_ADAPTER_INFO</font><font color="#800000">*)</font>
						<span style="font-size: 12pt; color: maroon;">malloc</span><font color="#800000">(</font><span style="font-size: 12pt; color: gray;">ulOutBufLen</span></font><font color="#800000" face="Fixedsys">);<br>
&nbsp;&nbsp;&nbsp; }</font><font face="Fixedsys"><font color="#0000ff"><br>
						<br>
&nbsp;&nbsp;&nbsp; if</font> <font color="#800000">(</font><span style="font-size: 12pt; color: rgb(255, 128, 0);">NO_ERROR</span>
						<font color="#800000">!=</font> <font color="#800000">::</font><span style="font-size: 12pt; color: maroon;">GetAdaptersInfo</span><font color="#800000">(</font><span style="font-size: 12pt; color: gray;">thAdapterInfo</span><font color="#800000">,</font>
						<font color="#800000">&amp;</font><span style="font-size: 12pt; color: gray;">ulOutBufLen</span><font color="#800000">))</font></font><font color="#800000" face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; {</font><font face="Fixedsys"><span style="font-size: 12pt; color: gray;"><br>
						</span></font><font color="#800000" face="Fixedsys">&nbsp;&nbsp;&nbsp;
						</font><font face="Fixedsys"><font color="#0000ff">
						#ifdef</font>
						<span style="font-size: 12pt; color: rgb(255, 128, 0);">DEBUG</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000ff">CLog</font><font color="#800000">::</font><span style="font-size: 12pt; color: maroon;">DebugMsg</span><font color="#800000">(</font><span style="font-size: 12pt; color: rgb(255, 128, 0);">byT</span><font color="#800000">(</font><font color="#008080">"lic 
						verifier"</font><font color="#800000">),</font>
						<span style="font-size: 12pt; color: rgb(255, 128, 0);">byT</span><font color="#800000">(</font><font color="#008080">"failed 
						verifying license"</font></font><font color="#800000" face="Fixedsys">));</font><font color="#0000ff" face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; #endif</font><font face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000ff">CProcess</font><font color="#800000">::</font><span style="font-size: 12pt; color: maroon;">Exit</span><font color="#800000">(-</font><font color="#ff0000">97</font></font><font color="#800000" face="Fixedsys">);<br>
&nbsp;&nbsp;&nbsp; }</font><font face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; <span style="font-size: 12pt; color: gray;">btAddr</span><font color="#800000">.</font><span style="font-size: 12pt; color: maroon;">assign</span><font color="#800000">(</font><span style="font-size: 12pt; color: gray;">thAdapterInfo</span><font color="#800000">-&gt;</font><span style="font-size: 12pt; color: gray;">Address</span><font color="#800000">,</font>
						<span style="font-size: 12pt; color: gray;">
						thAdapterInfo</span><font color="#800000">-&gt;</font><span style="font-size: 12pt; color: gray;">AddressLength</span></font><font color="#800000" face="Fixedsys">);</font><font color="#008000" face="Fixedsys"><br>
&nbsp;&nbsp;&nbsp; // @@ 获取首网卡的 MAC 地址<br>
&nbsp;&nbsp;&nbsp; // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</font></p><p class="MsoNormal" style="text-align: left;" align="left">
						<font face="Fixedsys">&nbsp;&nbsp;&nbsp;
						<font color="#008000">// ...</font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></p></td></tr></tbody></table></div>
				<p>　</p></td></tr>
		<tr>
			<td valign="top" width="181" align="left" bgcolor="#ebebeb">调用系统API</td><td valign="top" align="left">所有系统API调用前都要加上全局名称解析符 "::"。<p>例如：</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table227" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal"><font face="Fixedsys"><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">::MessageBoxA</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">NULL</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span style="font-size: 12pt; color: gray;" lang="EN-US">gcErrorMsg</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">,</span><span style="font-size: 12pt; color: teal;" lang="EN-US"> "!FATAL ERROR!"</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">MB_ICONSTOP</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">|</span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">MB_OK</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br><br></span><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: red;" lang="EN-US">0</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> == ::</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">GetTempFileName</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: gray;" lang="EN-US">m_basedir</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">.</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">c_str</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(), </span><span style="font-size: 12pt; color: rgb(255, 128, 0);" lang="EN-US">byT</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span><span style="font-size: 12pt; color: teal;" lang="EN-US">"bai"</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">), </span><span style="font-size: 12pt; color: red;" lang="EN-US">0</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span style="font-size: 12pt; color: gray;" lang="EN-US">stR</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">.</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">ref</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">()))<br>{<br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">&nbsp;&nbsp;&nbsp; // ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></p></td></tr></tbody></table><p class="MsoNormal">　</p></div></td>
		</tr>
		<tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
			<font color="#808080">让相同的代码只出现一次</font></td><td valign="top" align="left">
			为了使程序更容易调试、修改，尽量降低日后维护的复杂性，应该把需要在一个以上位置使用的代码段封装成函数。哪怕这段代码很短，为了以后维护方便着想，也应当将其封装为内联函数。</td></tr></tbody></table><p align="left">关于函数的例子，请参见：<a href="http://baiy.cn/doc/cpp/x_function_style.htm">函数的风格与版式例子</a></p><p align="left">关于函数的模板，请参见：<a href="http://baiy.cn/doc/cpp/comments_chs.htm#%E6%A0%87%E5%87%86%E5%87%BD%E6%95%B0%E6%B3%A8%E8%A7%A3">函数模板</a></p></div></td></tr></tbody></table><p>　</p></div><h3 align="left"><a name="代码风格与版式_变量、常量">变量、常量</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table47" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table117" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">声明格式</td><td valign="top" align="left">变量、常量的声明格式如下：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table126" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">[存储类] 类型 变量名;</td></tr></tbody></table><p align="left">其中：</p><ul><li><p align="left">以 "[ ]" 括住的为可选项目。</p></li><li><p align="left">"<font face="Fixedsys">存储类</font>" 的说明见下文</p></li></ul><p align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">定义格式</td><td valign="top" align="left">变量、常量的定义格式如下：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table127" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">[存储类] 类型 变量名 = 初始值;</td></tr></tbody></table><p align="left">其中：</p><ul><li><p align="left">以 "[ ]" 括住的为可选项目。</p></li><li><p align="left">"<font face="Fixedsys">存储类</font>" 的说明见下文</p></li></ul><p align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">存储类</td><td valign="top" align="left">除 "auto" 类型以外，诸如 "extern", "static", "register", "volatile" 等存储类均不可省略，且必须在声明和定义中一致地使用（即：不允许仅在声明或定义中使用）。<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">成员变量的存储类</td><td valign="top" align="left">由于C++语言的限制，成员变量的 "static" <font face="Fixedsys">等存储类说明不允许出现在变量定义中。</font><p><font face="Fixedsys">但是为了明确起见，这些存储类应以注释的形式在定义中给出。</font></p><p><font face="Fixedsys">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table128" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">/*static*/</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#0000ff"><span style="font-size: 12pt;" lang="EN-US">int</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">CThread</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">::</span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">sm_nPID</span></font><span style="font-size: 12pt; color: blue;" lang="EN-US"> </span><font color="#800000"><span style="font-size: 12pt;" lang="EN-US">=</span></font><span style="font-size: 12pt; color: blue;" lang="EN-US"> </span><font color="#ff0000"><span style="font-size: 12pt;" lang="EN-US">0</span></font><font color="#880000"><span style="font-size: 12pt;" lang="EN-US">;</span></font></font></p></td></tr></tbody></table><p class="MsoNormal" style="" align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">指针或引用类型的定义和声明</td><td valign="top" align="left">在声明和定义多个指针或引用变量/常量时，每个变量至少占一行。例如：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table150" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><font color="#0000ff"><span style="font-size: 12pt;">int</span></font><span lang="en-us"><font color="#880000">*</font> </span><font color="#808080"><span style="font-size: 12pt;">pn1</span></font><font color="#880000">,<br></font><span lang="en-us">&nbsp;&nbsp; </span><font color="#880000">*</font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pn2</span></font><font color="#880000"> = </font><font color="#ff8000">NULL</font><font color="#880000">,<br></font><span lang="en-us">&nbsp;&nbsp; </span><font color="#880000">*</font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pn3</span></font><font color="#880000">;<br><br></font><font color="#0000ff"><span style="font-size: 12pt;">char</span></font><font color="#880000">*</font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pc1</span></font><font color="#880000">;<br></font><font color="#0000ff"><span style="font-size: 12pt;">char</span></font><font color="#880000">*</font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pc2</span></font><font color="#880000">;<br></font><font color="#0000ff"><span style="font-size: 12pt;">char</span></font><font color="#880000">*</font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pc3</span></font><font color="#880000">;<br><br></font><font color="#008000">// 错误的写法：</font><font color="#880000"><br></font><font color="#0000ff"><span style="font-size: 12pt;">int</span></font><font color="#880000">* </font><font color="#808080"><span style="font-size: 12pt;">pn11</span></font><font color="#880000">, *</font><font color="#808080"><span style="font-size: 12pt;">pn12</span></font><font color="#880000">, *</font><font color="#808080"><span style="font-size: 12pt;">pn13</span></font><font color="#880000">;</font></font></p></td></tr></tbody></table><p class="MsoNormal" style="" align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">常指针和指针常量</td><td valign="top" align="left">声明/定义一个常指针（指向常量的指针）时，"const" 关键字一律放在类型说明的左侧。<p>声明/定义一个指针常量（指针本身不能改变）时，"const" 关键字一律放在变量左侧、类型右侧。</p><p>例如：</p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table151" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt;"><font color="#0000ff">const char</font></span><font color="#880000">*</font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pc1</span></font><font color="#880000">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#008000">// 常指针</font><font color="#880000"><br></font><font color="#0000ff"><span style="font-size: 12pt;">char</span></font><font color="#880000">*</font><span lang="en-us"> </span><span style="font-size: 12pt;"><font color="#0000ff">const</font><font color="#808080"> pc2</font></span><font color="#880000">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#008000">// 指针常量</font><font color="#880000"><br></font><font color="#0000ff"><span style="font-size: 12pt;">const char</span></font><font color="#880000">*</font><span lang="en-us"> </span><font color="#0000ff"><span style="font-size: 12pt;">const</span></font><span lang="en-us"> </span><font color="#808080"><span style="font-size: 12pt;">pc3</span></font><font color="#880000">; </font><font color="#008000">// 常指针常量</font><font color="#880000"><br><br></font><font color="#008000">// 错误的写法：</font><font color="#880000"><br></font><font color="#0000ff"><span style="font-size: 12pt;">char const</span></font><font color="#880000">* </font><font color="#808080"><span style="font-size: 12pt;">pc1</span></font><font color="#880000">;&nbsp; </font><font color="#008000">// </font></font><font color="#008000" face="Fixedsys">与 const char* pc1 含义相同，但不允许这样写</font></p></td></tr></tbody></table><p class="MsoNormal" style="" align="left">　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">全局变量、常量的注释</td><td valign="top" align="left">全局变量、常量的注释独占一行，并用 "//!" 开头。<p><font face="Fixedsys">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table152" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">//! 当前进程的ID</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#0000ff"><span style="font-size: 12pt;" lang="EN-US"><br>static int</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">sg_nPID</span></font><span style="font-size: 12pt; color: blue;" lang="EN-US"> </span><font color="#800000"><span style="font-size: 12pt;" lang="EN-US">=</span></font><span style="font-size: 12pt; color: blue;" lang="EN-US"> </span><font color="#ff0000"><span style="font-size: 12pt;" lang="EN-US">0</span></font><font color="#880000"><span style="font-size: 12pt;" lang="EN-US">;<br><br></span></font><span style="font-size: 12pt; color: green;" lang="EN-US">//! 分割符</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt;" lang="EN-US"><font color="#0000ff"><br>static const char</font><font color="#880000">*</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">pcDTR</span></font><span style="font-size: 12pt; color: blue;" lang="EN-US"> </span><font color="#800000"><span style="font-size: 12pt;" lang="EN-US">=</span></font><span style="font-size: 12pt; color: blue;" lang="EN-US"> </span><font color="#008080"><span style="font-size: 12pt;" lang="EN-US">"\\/"</span></font><font color="#880000"><span style="font-size: 12pt;" lang="EN-US">;</span></font></font></p></td></tr></tbody></table></div><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
			<a name="代码风格与版式_变量、常量_类型转换">类型转换</a></td><td valign="top" align="left">禁止使用C风格的 "(类型)" 
			类型转换，应当优先使用C++的 "xxx_cast" 风格的类型转换。C++风格的类型转换可以提供丰富的含义和功能，以及更好的类型检查机制，这对代码的阅读、修改、除错和移植有很大的帮助。其中：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#EBEBEB" bordercolordark="#EBEBEB" id="table153" width="95%" border="1" cellpadding="4"><tbody><tr><td valign="top" width="156" align="left">static_cast</td><td valign="top" align="left">static_cast 用于编译器认可的，安全的静态转换，比如将 "char" 转为 "int" 等等。该操作通常在编译时完成，但有可能调用用户定义的类型转换操作或非 explicit 的单参（或至少从第二个参数开始带缺省值的）构造函数
			。</td></tr><tr><td valign="top" width="156" align="left">reinterpret_cast</td><td valign="top" align="left">reinterpret_cast 用于编译器不认可的，不安全的静态转换，比如将 "int*" 转为 "int" 等等。这种转换有可能产生可移植性方面的问题，该操作在编译时完成
					。（注意：reinterpret_cast 比 C 
					风格的类型转换还要野蛮，它不进行任何地址对齐和调整，也不调用任何用户定义的类型转换操作）</td></tr><tr><td valign="top" width="156" align="left">const_cast</td><td valign="top" align="left">const_cast 用于将一个常量转化为相应类型的变量，比如将 "const char*" 转换成 "char*" 等等。这种转换可能伴随潜在的错误。该操作在编译时完成
				。</td></tr><tr><td valign="top" width="156" align="left">dynamic_cast</td><td valign="top" align="left">dynamic_cast 是 C++ RTTI 机制的重要体现，用于在类层次结构中漫游。dynamic_cast 可以对指针和引用进行自由度很高的向上、向下和交叉转换。被正确使用的 dynamic_cast 操作将在运行时完成
					。反之，若编辑器关闭了 RTTI 
					支持，或被转换的类层次结构中没有抽象类存在，则此操作在编译时完成（有些编译器会给出警告）。</td></tr></tbody></table><p align="left">
		此外，对于定义了单参构造函数或类型转换操作的类来说，应当优先使用构造函数风格的类型转换，如：'string("test")' 等等。</p><p align="left">通
常来说，"xxx_cast"
格式的转换与构造函数风格的类型转换之间，最大的区别在于：构造函数风格的转换经常会生成新的临时对象，可能伴随相当的时间和空间开销。而
"xxx_cast"
格式的转换只是告诉编译器，将指定内存中的数据当作另一种类型的数据看待，这些操作一般在编译时完成，不会对程序的运行产生额外开销。当
然，"dynamic_cast" 和某些 "static_cast" 则例外。</p><p align="left">参见：<a href="http://baiy.cn/doc/cpp/inside_rtti.htm">RTTI、虚函数和虚基类的开销分析和使用指导</a></p></div></td></tr></tbody></table></div></td></tr></tbody></table></div><p align="left">　</p><h3 align="left"><a name="代码风格与版式_枚举、联合、typedef">枚举、联合、typedef</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table48" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table122" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">枚举、联合的定义格式</td><td valign="top" align="left">枚举、联合的定义格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table130" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">//! 说明（可选）</font><br><font color="#0000ff">enum</font>|<font color="#0000ff">union</font> 名称<br><font color="#880000">{</font><br>&nbsp;&nbsp;&nbsp; 内容&nbsp; <font color="#008000">
			// 注释（可选）</font><br><font color="#880000">};</font></font></td></tr></tbody></table></div><p><font face="Fixedsys">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table131" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">//! </span><span style="color: rgb(0, 128, 0);" lang="en-us">服务</span><span style="font-size: 12pt; color: rgb(0, 128, 0);" lang="EN-US">的状态</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt;" lang="EN-US"><font color="#0000ff"><br>enum SRVSTATE<br></font><font color="#880000">{</font><font color="#0000ff"><br>&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_INVALID</font><font color="#0000ff">&nbsp; </font><font color="#880000">=</font><font color="#0000ff"> </font><font color="#ff0000">0</font><font color="#880000">,&nbsp; </font></span><font color="#008000">
				// 无效（尚未启动）</font><span style="font-size: 12pt;" lang="EN-US"><font color="#0000ff"><br>&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_STARTING</font><font color="#0000ff"> </font><font color="#880000">=</font><font color="#0000ff"> </font><font color="#ff0000">1</font><font color="#880000">,<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_STARTED</font><font color="#880000">,<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_PAUSING</font><font color="#880000">,<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_PAUSED</font><font color="#880000">,<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_STOPPING</font><font color="#880000">,<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#ff8000">SRV_STOPPED</font><font color="#880000"><br>};</font><font color="#0000ff"><br></font></span><font color="#880000"><span style="font-size: 12pt;" lang="EN-US"><br></span></font><span style="font-size: 12pt; color: green;" lang="EN-US">//! 32</span><span style="font-size: 12pt; color: rgb(0, 128, 0);" lang="EN-US">位整数</span><span style="font-size: 12pt;" lang="EN-US"><font color="#008000"><br></font><font color="#0000ff">union INT32</font></span><span style="font-size: 12pt;"><font color="#880000"><br>{<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">unsigned</font><font color="#880000"> </font><font color="#0000ff">char</font><font color="#880000">&nbsp;&nbsp;&nbsp; </font><font color="#808080">cByte</font><font color="#880000">[</font><font color="#ff0000">4</font><font color="#880000">];<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">unsigned</font><font color="#880000"> </font><font color="#0000ff">short</font><font color="#880000">&nbsp;&nbsp; </font><font color="#808080">nShort</font><font color="#880000">[</font><font color="#ff0000">2</font><font color="#880000">];<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">unsigned</font><font color="#880000"> </font><font color="#0000ff">long</font><font color="#880000">&nbsp;&nbsp;&nbsp; </font><font color="#808080">nFull</font><font color="#880000">;<br>};</font></span></font></p></td></tr></tbody></table></div><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">typedef的定义格式</td><td valign="top" align="left">typedef 的定义格式为：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table134" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">//! 说明（可选）</font><br><font color="#0000ff">typedef</font> 原类型 类型别名;</font></td></tr></tbody></table></div><p><font face="Fixedsys">例如：</font></p><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table135" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><p class="MsoNormal" style="text-align: left;" align="left"><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">//! 返回值类型</span><span style="font-size: 12pt;" lang="EN-US"><font color="#0000ff"><br>typedef int EXITCODE</font><font color="#880000">;</font><font color="#0000ff"><br></font></span><font color="#880000"><span style="font-size: 12pt;" lang="EN-US"><br></span></font><span style="font-size: 12pt; color: green;" lang="EN-US">//! 字符串数组类型</span><span style="font-size: 12pt;" lang="EN-US"><font color="#008000"><br></font><font color="#0000ff">typedef vector</font><font color="#880000">&lt;</font><font color="#0000ff">string</font></span><span style="font-size: 12pt;"><font color="#880000">&gt;</font></span><font color="#0000ff"><span style="font-size: 12pt;" lang="EN-US"> VSTR</span></font><span style="font-size: 12pt;"><font color="#880000">;</font></span></font></p></td></tr></tbody></table></div></td></tr></tbody></table></div></td></tr></tbody></table></div><p align="left">　</p><h3 align="left"><a name="代码风格与版式_宏">宏</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table49" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center">
			<p align="left">宏是C/C++编译环境提供给用户的，在编译开始前（编译预处理阶段）执行的唯一可编程逻辑。</p>
			<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table123" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">何时使用宏</td><td valign="top" align="left">应当尽量减少宏的使用，在所有可能的地方都使用常量、模版和内联函数来代替宏。<p>　</p></td></tr>
				<tr>
					<td valign="top" width="181" align="left" bgcolor="#ebebeb">边界效应</td><td valign="top" align="left">使用宏的时候应当注意边界效应，例如，以下代码将会得出错误的结果：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table248" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#0000ff" face="Fixedsys">#define </font><font color="#ff8000" face="Fixedsys">PLUS</font><font color="#880000" face="Fixedsys">(</font><font color="#808080" face="Fixedsys">x</font><font color="#880000" face="Fixedsys">,</font><font color="#808080" face="Fixedsys">y</font><font color="#880000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"> </font><font color="#808080" face="Fixedsys">x</font><font color="#880000" face="Fixedsys">+</font><font color="#808080" face="Fixedsys">y</font><font color="#0000ff" face="Fixedsys"><br><br></font><font color="#808080" face="Fixedsys">cout</font><font color="#0000ff" face="Fixedsys"> </font><font color="#880000" face="Fixedsys">&lt;&lt;</font><font color="#0000ff" face="Fixedsys"> </font><font color="#ff8000" face="Fixedsys">PLUS</font><font color="#880000" face="Fixedsys">(</font><font color="#ff0000" face="Fixedsys">1</font><font color="#880000" face="Fixedsys">,</font><font color="#ff0000" face="Fixedsys">1</font><font color="#880000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"> </font><font color="#880000" face="Fixedsys">*</font><font color="#0000ff" face="Fixedsys"> </font><font color="#ff0000" face="Fixedsys">2</font><font color="#880000" face="Fixedsys">;</font></td></tr></tbody></table><p align="left">以上程序的执行结果将会是 "3"，而不是 "4"，因为 "PLUS(1,1) * 2" 表达式将会被展开为："1 + 1 * 2"。</p><p align="left">
						因此在定义宏的时候，只要允许，就应该为它的替换内容括上 "( )" 或 "{ }"。例如：</p>
						<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table249" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">#define</font> <font color="#ff8000">PLUS</font><font color="#880000">(</font><font color="#808080">x</font><font color="#880000">,</font><font color="#808080">y</font><font color="#880000">)</font> <font color="#880000">(</font><font color="#808080">x</font><font color="#880000">+</font><font color="#808080">y</font><font color="#880000">)<br><br></font><font color="#0000ff">#define</font> <font color="#ff8000">SAFEDELETE</font><font color="#880000">(</font><font color="#808080">x</font><font color="#880000">)</font> <font color="#880000">{</font><font color="#0000ff">delete</font><font color="#880000"> </font><font color="#808080">x</font><font color="#880000">; </font><font color="#808080">x</font><font color="#880000">=</font><font color="#ff0000">0</font><font color="#880000">}</font></font></td></tr></tbody></table></div></td>
				</tr>
				<tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
					对复杂的宏实行缩进</td><td valign="top" align="left">
					有时为了实现诸如：对编译器和目标平台自适应；根据用户选项编译不同模块等机制，需要使用大量较为复杂的宏定义块。在宏比较复杂（代码块多于5行）的地方，为了便于阅读和理解，应当遵循与普通C++代码相同的原则进行缩进和排版。<p>
					为了区别于其他语句和便于阅读，宏语句的 "#" 前缀<b>不要</b>与语句本身一起缩进，例如：</p>
					<div align="center">
						<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table250" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
							<font color="#008000" face="Fixedsys">//! Windows</font><font color="#0000ff" face="Fixedsys"><br>
							#if</font><font face="Fixedsys">
							<font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__WIN32__</font></font><font color="#800000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; if</font><font face="Fixedsys">
							<font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__VC__</font><font color="#800000">)</font>
							<font color="#800000">||</font>
							<font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__BC__</font><font color="#800000">)</font>
							<font color="#800000">||</font>
							<font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__GNUC__</font><font color="#800000">) 
							// ...</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_EXPORT</font>
							<font color="#0000ff">__declspec</font><font color="#800000">(</font><font color="#0000ff">dllexport</font></font><font color="#800000"><font face="Fixedsys">)</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_IMPORT</font>
							<font color="#0000ff">__declspec</font><font color="#800000">(</font><font color="#0000ff">dllimport</font></font><font color="#800000"><font face="Fixedsys">)</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; else</font><font face="Fixedsys">
							</font><font color="#008000"><font face="Fixedsys">
							// 编译器不支持 __declspec()</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_EXPORT</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_IMPORT</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; endif</font><font color="#008000" face="Fixedsys"><br>
							<br>
							//! OS/2</font><font color="#0000ff" face="Fixedsys"><br>
							#elif</font><font face="Fixedsys">
							<font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__OS2__</font></font><font color="#800000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; if</font><font face="Fixedsys">
							<font color="#0000ff">defined</font>
							<font color="#800000">(</font><font color="#ff8000">__WATCOMC__</font></font><font color="#800000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_EXPORT</font>
							<font color="#0000ff">__declspec</font><font color="#800000">(</font><font color="#0000ff">dllexport</font></font><font color="#800000"><font face="Fixedsys">)</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_IMPORT</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; elif</font><font face="Fixedsys">
							<font color="#800000">!(</font><font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__VISAGECPP__</font><font color="#800000">)</font>
							<font color="#800000">&amp;&amp;</font>
							<font color="#800000">(</font><font color="#ff8000">__IBMCPP__</font><font color="#800000">&lt;</font><font color="#ff0000">400</font>
							<font color="#800000">||</font>
							<font color="#ff8000">__IBMC__</font><font color="#800000">&lt;</font><font color="#ff0000">400</font></font><font color="#800000"><font face="Fixedsys">))</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_EXPORT</font>
							<font color="#0000ff">_Export</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_IMPORT</font>
							<font color="#0000ff">_Export</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; endif</font><font color="#008000" face="Fixedsys"><br>
							<br>
							//! Macintosh</font><font color="#0000ff" face="Fixedsys"><br>
							#elif </font><font face="Fixedsys">
							<font color="#0000ff">defined</font><font color="#800000">(</font><font color="#ff8000">__MAC__</font></font><font color="#800000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; ifdef</font><font face="Fixedsys">
							<font color="#ff8000">__MWERKS__</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_EXPORT</font>
							<font color="#0000ff">__declspec</font><font color="#800000">(</font><font color="#0000ff">export</font></font><font color="#800000" face="Fixedsys">)</font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_IMPORT</font>
							<font color="#0000ff">__declspec</font><font color="#800000">(</font><font color="#0000ff">import</font></font><font color="#800000" face="Fixedsys">)</font><font color="#0000ff"><font face="Fixedsys"><br>
							#&nbsp;&nbsp; endif</font></font><p><font color="#0000ff"></font>
							<font color="#008000" face="Fixedsys">// Others</font><font color="#0000ff" face="Fixedsys"><br>
							#else<br>
							#&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_EXPORT</font></font><font color="#0000ff" face="Fixedsys"><br>
							#&nbsp;&nbsp; define</font><font face="Fixedsys">
							<font color="#ff8000">BAIY_IMPORT</font><br>
							</font><font color="#0000ff" face="Fixedsys"><br>
							#endif</font></p></td></tr></tbody></table></div>
					</td></tr></tbody></table></div></td></tr></tbody></table></div><p align="left">　</p><h3 align="left"><a name="代码风格与版式_名空间">名空间</a><br>
	<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table110" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table124" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">名空间的使用</td><td valign="top" align="left">名空间可以避免名字冲突、分组不同的接口以及简化命名规则。应当尽可能地将所有接口都放入适当的名字空间中。<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">将实现和界面分离</td><td valign="top" align="left">提供给用户的界面和用于实现的细节应当分别放入不同的名空间中。<p>例如：如果将一个软件模块的所有接口都放在名空间 "MODULE" 中，那么这个模块的所有实现细节就可以放入名空间 "MODULE_IMP" 中
			，或者 "MODULE" 内的 "IMP" 中。</p><p>　</p></td></tr></tbody></table></div></td></tr></tbody></table></div></div><p>　</p><h3 align="left"><a name="代码风格与版式_异常">异常</a><br>
<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
	<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table230" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><p align="left">异常使C++的错误处理更为结构化；错误传递和故障恢复更为安全简便；也使错误处理代码和其它代码间有效的分离开来。</p>
		<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table231" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">何时使用异常</td><td valign="top" align="left">异常机制只用在发生错误的时候，仅在发生错误时才应当抛出异常。这样做有助于错误处理和程序动作两者间的分离，增强程序的结构化，还保证了程序的执行效率。<p>确定某一状况是否算作错误有时会很困难。比如：未搜索到某个字符串、等待一个信号量超时等等状态，在某些情况下可能并不算作一个错误，而在另一些情况下可能就是一个致命错误。</p><p>有鉴于此，仅当某状况必为一个错误时（比如：分配存储失败、创建信号量失败等），才应该抛出一个异常。而对另外一些模棱两可的情况，就应当使用返回值等其它手段报告
			。</p>
			<p>
			此外，在发生错误的位置，已经能够获得足够的信息处理该错误的情况不属于异常，应当对其就地处理。只有无法获得足够的信息来处理发生的错误时，才应该抛出一个异常。</p><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">用异常代替goto等其它错误处理手段</td><td valign="top" align="left">曾经被广泛使用的传统错误处理手段有goto风格和do...while风格等，以下是一个goto风格的例子:<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table232" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
			<img src="index_files/a.png" width="138" border="0" height="46"><p><font face="Fixedsys"><font color="#008000">//! 使用goto进行错误处理的例子</font><br></font><span class="GramE"><span lang="en-us"><font color="#0000ff" face="Fixedsys">bool</font></span></span><font face="Fixedsys"><span class="GramE"><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US"><br>Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span></span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">)</font><o:p><br></o:p><font face="Fixedsys">{</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">int</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r </span><span style="font-size: 12pt; color: maroon;" lang="EN-US">= </span><span style="font-size: 12pt; color: blue;" lang="EN-US">false</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br><br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">&nbsp;&nbsp;&nbsp; // ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><br>&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (!</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation1</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">))<br>&nbsp;&nbsp;&nbsp;&nbsp;{</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">goto</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">onerr</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br><br></o:p>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US"><span class="GramE">try</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation2</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (...)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;{</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> = </span><span style="font-size: 12pt; color: blue;" lang="EN-US">true</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">goto</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">onerr</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><span style="font-size: 12pt; color: gray;">r</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> = </span><span style="font-size: 12pt; color: blue;">true</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: gray;" lang="EN-US">onerr</span></span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">:</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">清理代码</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">return</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}</span></font></p></td></tr></tbody></table><p align="left">由上例可见，goto风格的错误处理至少存在问题如下：</p><ul><li><p align="left">错误处理代码和其它代码混杂在一起，使程序不够清晰易读
				。</p></li><li><p align="left">函数内的变量必须在第一个 "goto" 语句之前声明，违反就近原则。</p></li><li><p align="left">多处跳转的使用破坏程序的结构化，影响程序的可读性，使程序容易出错
					。</p></li><li><p align="left">对每个会抛出异常的操作都需要用额外的 try...catch 块检测和处理。</p></li><li><p align="left">稍微复杂一点的分类错误处理要使用多个标号和不同的goto跳转（如: "goto onOp1Err", "goto onOp2Err" ...）。这将使程序变得无法理解和错误百出。</p></li></ul><p align="left">再来看看 do...while 风格的错误处理：</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table233" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
					<img src="index_files/a.png" width="138" border="0" height="46"><p><font face="Fixedsys"><font color="#008000">//! 使用do...while进行错误处理的例子</font><br></font><span class="GramE"><span lang="en-us"><font color="#0000ff" face="Fixedsys">bool</font></span></span><font face="Fixedsys"><span class="GramE"><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US"><br>Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span></span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">)</font><o:p><br></o:p><font face="Fixedsys">{</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">int</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r </span><span style="font-size: 12pt; color: maroon;" lang="EN-US">= </span><span style="font-size: 12pt; color: blue;" lang="EN-US">false</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br><br></span><span style="font-size: 12pt;" lang="EN-US"><font color="#008000">&nbsp;&nbsp;&nbsp; // ...<br><br>&nbsp;&nbsp;&nbsp; </font></span><span style="font-size: 12pt; color: blue;">do</span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span></font><span style="font-size: 12pt; color: rgb(136, 0, 0);">{<br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (!</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation1</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">))<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;{</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;">break</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br><br></o:p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;</span><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">do</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US"><span class="GramE">try</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation2</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (...)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;{</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> = </span><span style="font-size: 12pt; color: blue;" lang="EN-US">true</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">break</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;}</font><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;} </span><span style="font-size: 12pt; color: blue;">while</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (Operation3())</span><span style="font-size: 12pt; color: blue;"><br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; </font></span><font face="Fixedsys"><span style="font-size: 12pt; color: gray;">r</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> = </span><span style="font-size: 12pt; color: blue;">true</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt;" lang="EN-US"><font color="#008000">&nbsp;&nbsp;&nbsp; </font></span><span style="font-size: 12pt; color: rgb(136, 0, 0);">}</span><span style="font-size: 12pt; color: blue;"> while</span><span style="font-size: 12pt; color: rgb(136, 0, 0);"> (</span><span style="font-size: 12pt; color: blue;">false</span><span style="font-size: 12pt; color: rgb(136, 0, 0);">);<br><br></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">清理代码</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">return</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></p></td></tr></tbody></table><p align="left">与 goto 风格的错误处理相似
				，do...while 风格的错误处理有以下问题：</p><ul><li><p align="left">错误处理代码和其它代码严重混杂，使程序非常难以理解
					。</p></li><li><p align="left">需要进行分类错误处理时非常困难，通常需要事先设置一个标志变量，并在清理时使用 "switch case" 语句进行分检。</p></li><li><p align="left">对每个会抛出异常的操作都需要用额外的 try...catch 块检测和处理
					。</p></li></ul><p align="left">此外，还有一种更糟糕的错误处理风格――直接在出错位置就地完成错误处理：</p>
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table234" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
					<img src="index_files/a_002.png" width="217" border="0" height="46"><p><font face="Fixedsys"><font color="#008000">//! 直接进行错误处理的例子</font><br></font><span class="GramE"><span lang="en-us"><font color="#0000ff" face="Fixedsys">bool</font></span></span><font face="Fixedsys"><span class="GramE"><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US"><br>Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span></span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">)</font><o:p><br></o:p><font face="Fixedsys">{</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">int</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br><br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">&nbsp;&nbsp;&nbsp; // ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><br>&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (!</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation1</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">))<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">清理代码</span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">return</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;" lang="EN-US">false</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br><br></o:p>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US"><span class="GramE">try</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation2</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (...)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;{</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">清理代码</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">return</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">true</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">// ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br><br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">清理代码<br>&nbsp;&nbsp;&nbsp; </span><font face="Fixedsys"><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">return</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">true</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}</span></font></p></td></tr></tbody></table><p align="left">这种错误处理方式所带来的隐患可以说是无穷无尽，这里不再列举。</p><p align="left">与传统的错误处理方法不同，C++的异常机制很好地解决了以上问题。使用异常完成出错处理时，可以将大部分动作都包含在一个try块中，并以不同的catch块捕获和处理不同的错误：</p>
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table235" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">//! 使用异常进行错误处理的例子</font><br></font><span class="GramE"><span lang="en-us"><font color="#0000ff" face="Fixedsys">bool</font></span></span><font face="Fixedsys"><span class="GramE"><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US"><br>Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span></span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">)</font><o:p><br></o:p><font face="Fixedsys">{</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">int</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">, </span><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><span class="SpellE"><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">bool</span></span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r </span><span style="font-size: 12pt; color: maroon;" lang="EN-US">= </span><span style="font-size: 12pt; color: blue;" lang="EN-US">false</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US"><span class="GramE">try</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; </span><span class="GramE"><span style="font-size: 12pt; color: blue;" lang="EN-US">if</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (!</span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation1</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">nCode</span></span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">))<br>&nbsp;</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; </span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">&nbsp;&nbsp;{<br>&nbsp;</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: blue;">throw</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: blue;">false</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">&nbsp;&nbsp;}</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br><br></o:p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US">Operation2</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">(</font></span><font face="Fixedsys"><span class="SpellE"><span style="font-size: 12pt; color: gray;" lang="EN-US">i</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: blue;">bool</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">err</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US">)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;{</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ...<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: gray;" lang="EN-US">r </span><span style="font-size: 12pt; color: maroon;" lang="EN-US">= </span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">err</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US">;</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;}</font></span><br><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: blue;">const excption</span><font color="#880000"><span style="font-size: 12pt;">&amp;</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">err</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US">)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;{</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span><span style="font-size: 12pt; color: rgb(0, 128, 0);">excption类错误处理</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;}</font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (...)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;{</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... 处理其它错误</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;}<br></font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ... </span></font><span style="font-size: 12pt; font-family: Fixedsys; color: green;">清理代码<br>&nbsp;&nbsp;&nbsp; </span><font face="Fixedsys"><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US">return</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(128, 128, 128);" lang="EN-US">r</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">;</font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}</span></font></td></tr></tbody></table><p align="left">以上代码示例中，错误处理和动作代码完全分离，错误分类清晰明了，好处不言而喻。</p><p align="left">　</p></div></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">构造函数中的异常</td><td valign="top" align="left">在构造函数中抛出异常将中止对象的构造，这将产生一个没有被完整构造的对象。<p>对于C++来说，这种不完整的对象将被视为尚未完成创建动作而不被认可，也意味着其析构函数永远不会被调用。这个行为本身无可非议，就好像公安局不会为一个被流产的婴儿发户口然后再开个死亡证明书一样。但有时也会产生一些问题，例如：</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table236" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#0000ff" face="Fixedsys">class CSample</font><font color="#880000" face="Fixedsys"><br>{<br></font><font color="#0000ff" face="Fixedsys">&nbsp;&nbsp;&nbsp; </font><font color="#008000" face="Fixedsys">// ...</font><font color="#0000ff" face="Fixedsys"><br><br>&nbsp;&nbsp;&nbsp; char</font><font color="#880000" face="Fixedsys">*</font><font color="#0000ff" face="Fixedsys"> </font><font color="#808080" face="Fixedsys">m_pc</font><font color="#880000" face="Fixedsys">;<br>};<br><br></font><font face="Fixedsys"><font color="#0000ff">CSample</font>::<font color="#0000ff">CSample</font><font color="#880000">()<br>{<br></font>&nbsp;&nbsp;&nbsp; <font color="#808080">m_pc</font> <font color="#880000">=</font> <font color="#0000ff">new</font> <font color="#0000ff">char</font><font color="#880000">[</font><font color="#ff0000">256</font><font color="#880000" face="Fixedsys">];<br></font>&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><br>&nbsp;&nbsp;&nbsp; <font color="#0000ff">throw</font> <font color="#880000">-</font><font color="#ff0000">1</font><font color="#880000">;</font>&nbsp; <font color="#008000">// m_pc将永远不会被释放</font><font color="#880000"><br>}<br><br></font><font color="#0000ff">CSample</font>::<font color="#880000">~</font><font color="#0000ff">CSample</font><font color="#880000">()&nbsp; </font><font color="#008000">// 析构函数不会被调用</font><font color="#880000"><br>{<br></font>&nbsp;&nbsp;&nbsp; <font color="#0000ff">delete</font><font color="#800000">[]</font><font color="#808080"> m_pc</font><font color="#880000" face="Fixedsys">;<br></font><font color="#880000">}</font></font></td></tr></tbody></table><p align="left">解决这个问题的方法是在抛出异常以前释放任何已被申请的资源。一种更好的方法是使用一个满足“资源申请即初始化（RAII）”准则的类型（如：句柄类、灵巧指针类等等）来代替一般的资源申请与释放方式，如：</p>
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table237" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#0000ff">templete </font><font color="#880000">&lt;</font><font color="#0000ff">class T</font><font color="#880000">&gt;<br></font><font color="#0000ff">struct CAutoArray</font><font color="#880000"><br>{<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; CAutoArray</font><font color="#880000">(</font><font color="#0000ff">T</font><font color="#880000">*</font><font color="#0000ff"> </font><font color="#808080">p</font><font color="#880000"> = </font><font color="#ff8000">NULL</font><font color="#880000">)</font><font color="#0000ff"> </font><font color="#880000">:</font><font color="#0000ff"> </font><font color="#808080">m_p</font><font color="#880000">(</font><font color="#808080">p</font><font color="#880000">)</font><font color="#0000ff"> </font><font color="#880000">{};<br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#880000">~</font><font color="#0000ff">CAutoArray</font><font color="#880000">()</font><font color="#0000ff"> </font><font color="#880000">{</font><font color="#0000ff">delete</font><font color="#800000">[]</font><font color="#0000ff"> </font><font color="#808080">m_p</font><font color="#880000" face="Fixedsys">;}<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff" face="Fixedsys">T</font><font color="#880000" face="Fixedsys">* </font><font color="#0000ff">operator</font><font color="#880000" face="Fixedsys">=(</font><font color="#ff8000">IN </font><font color="#0000ff">T</font><font color="#880000" face="Fixedsys">* </font><font color="#808080">rhs</font><font color="#880000" face="Fixedsys">) <br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">if</font><font color="#880000" face="Fixedsys"> (</font><font color="#808080">rhs</font><font color="#880000" face="Fixedsys"> == </font><font color="#808080">m_p</font><font color="#880000" face="Fixedsys">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">return</font><font color="#880000" face="Fixedsys"> </font><font color="#808080">m_p</font><font color="#880000" face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">delete</font><font color="#800000">[]</font><font color="#880000" face="Fixedsys"> </font><font color="#808080">m_p</font><font color="#880000" face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#808080">m_p</font><font color="#880000" face="Fixedsys"> = </font><font color="#808080">rhs</font><font color="#880000" face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">return</font><font color="#880000" face="Fixedsys"> </font><font color="#808080">m_p</font><font color="#880000" face="Fixedsys">;<br>&nbsp;&nbsp;&nbsp; }</font><font color="#808080"><br></font><font color="#0000ff">&nbsp;&nbsp;&nbsp; </font><font color="#008000">// ...</font><font color="#0000ff"><br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; T</font><font color="#880000">*</font><font color="#0000ff"> m_p;</font><font color="#880000"><br>};<br><br></font></font><font color="#0000ff" face="Fixedsys">class CSample</font><font color="#880000" face="Fixedsys"><br>{<br></font><font color="#0000ff" face="Fixedsys">&nbsp;&nbsp;&nbsp; </font><font color="#008000" face="Fixedsys">// ...</font><font color="#0000ff" face="Fixedsys"><br><br>&nbsp;&nbsp;&nbsp; CAutoArray</font><font color="#880000" face="Fixedsys">&lt;</font><font color="#0000ff" face="Fixedsys">char</font><font color="#880000" face="Fixedsys">&gt;</font><font color="#0000ff" face="Fixedsys"> </font><font color="#808080" face="Fixedsys">m_hc</font><font color="#880000" face="Fixedsys">;<br>};</font><font face="Fixedsys"><font color="#880000"><br><br></font><font color="#0000ff">CSample</font>::<font color="#0000ff">CSample</font><font color="#880000">()<br>{<br></font>&nbsp;&nbsp;&nbsp; </font><font color="#808080" face="Fixedsys">m_hc </font><font face="Fixedsys"><font color="#880000">=</font> <font color="#0000ff">new</font> <font color="#0000ff">char</font><font color="#880000">[</font><font color="#ff0000">256</font><font color="#880000" face="Fixedsys">];<br></font>&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><br>&nbsp;&nbsp;&nbsp; <font color="#0000ff">throw</font> <font color="#880000">-</font><font color="#ff0000">1</font><font color="#880000">;</font>&nbsp; <font color="#008000">// 由于m_hc已经成功构造，m_hc.~CAutoPtr()将会<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 被调用，所以申请的内存将被释放</font><font color="#880000"><br>}</font></font></td></tr></tbody></table><p align="left">注意：上述CAutoArray类仅用于示范，对于所有权语义的通用自动指针，应该使用C++标准库中的 "auto_ptr" 模板类。对于支持引用计数和自定义销毁策略的通用句柄类，可以使用白杨工具库中的 "CHandle" 模板类。</p></div><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">析构函数中的异常</td><td valign="top" align="left">析构函数中的异常可能在2种情况下被抛出：<ol><li>对象被正常析构时</li><li>在一个异常被抛出后的退栈过程中――异常处理机制退出一个作用域，其中所有对象的析构函数都将被调用。</li></ol><p>由于C++不支持异常的异常，上述第二种情况将导致一个致命错误，并使程序中止执行。例如：</p><div align="center">
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table238" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font color="#0000ff" face="Fixedsys">class CSample</font><font color="#880000" face="Fixedsys"><br>{<br>&nbsp;&nbsp;&nbsp; ~</font><font color="#0000ff" face="Fixedsys">CSample</font><font color="#880000" face="Fixedsys">();<br></font><font color="#0000ff" face="Fixedsys">&nbsp;&nbsp;&nbsp; </font><font color="#008000" face="Fixedsys">// ...</font><font color="#0000ff" face="Fixedsys"><br></font><font color="#880000" face="Fixedsys">};</font><font face="Fixedsys"><font color="#880000"><br><br></font><font color="#0000ff">CSample</font>::</font><font color="#880000" face="Fixedsys">~</font><font face="Fixedsys"><font color="#0000ff">CSample</font><font color="#880000">()<br>{<br></font>&nbsp;&nbsp;&nbsp; <font color="#008000">// ...</font><br>&nbsp;&nbsp;&nbsp; <font color="#0000ff">throw</font> <font color="#880000">-</font><font color="#ff0000">1</font><font color="#880000">;&nbsp; </font><font color="#008000">// 在 "throw false" 的过程中再次抛出异常</font><font color="#880000"><br>}<br><br></font><font color="#0000ff">void</font><font color="#880000"><br>Function(</font><font color="#0000ff">void</font><font color="#880000">)<br>{<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CSample</font><font color="#880000"> </font><font color="#808080">iTest</font><font color="#880000">;<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">throw</font><font color="#880000"> </font><font color="#0000ff">false</font><font color="#880000">;&nbsp; </font><font color="#008000">// 错误，iTest.~CSample()中也会抛出异常</font><font color="#880000"><br>}</font></font></td></tr></tbody></table><p align="left"><br>如果必须要在析构函数中抛出异常，则应该在异常抛出前用 "std::uncaught_exception()" 事先判断当前是否存在已被抛出但尚未捕获的异常。例如：</p>
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table239" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
				<font color="#008000" face="Fixedsys"> // uncaught_exception() 
				函数在这个头文件中声明</font><font color="#0000ff" face="Fixedsys"><br>
				#include </font><font color="#008080" face="Fixedsys">
				&lt;exception&gt;</font><font color="#0000ff" face="Fixedsys"><br>
				<br>
				class CSample</font><font color="#880000" face="Fixedsys"><br>{<br>&nbsp;&nbsp;&nbsp; ~</font><font color="#0000ff" face="Fixedsys">CSample</font><font color="#880000" face="Fixedsys">();<br></font><font color="#0000ff" face="Fixedsys">&nbsp;&nbsp;&nbsp; </font><font color="#008000" face="Fixedsys">// ...</font><font color="#0000ff" face="Fixedsys"><br></font><font color="#880000" face="Fixedsys">};</font><font face="Fixedsys"><font color="#880000"><br><br></font><font color="#0000ff">CSample</font>::</font><font color="#880000" face="Fixedsys">~</font><font face="Fixedsys"><font color="#0000ff">CSample</font><font color="#880000">()<br>{<br></font>&nbsp;&nbsp;&nbsp; <font color="#008000">// ...<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">if</font><font color="#008000"> </font><font color="#880000">(!</font><font color="#0000ff">std</font><font color="#880000">::uncaught_exception())</font><font color="#008000"> // 没有尚未捕获的异常<br>&nbsp;&nbsp;&nbsp; </font><font color="#880000">{</font><br>&nbsp;&nbsp;&nbsp; <font color="#0000ff">&nbsp;&nbsp;&nbsp; throw</font> <font color="#880000">-</font><font color="#ff0000">1</font><font color="#880000">;&nbsp; </font><font color="#008000">// 抛出异常</font><font color="#880000"><br>&nbsp;&nbsp;&nbsp; }<br>}<br><br></font><font color="#0000ff">void</font><font color="#880000"><br>Function(</font><font color="#0000ff">void</font><font color="#880000">)<br>{<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CSample</font><font color="#880000"> </font><font color="#808080">iTest</font><font color="#880000">;<br>&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">throw</font><font color="#880000"> </font><font color="#0000ff">false</font><font color="#880000">;&nbsp; </font><font color="#008000">// 可以，iTest.~CSample()不会抛出异常</font><font color="#880000"><br>}</font></font></td></tr></tbody></table><p>　</p></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
				new&nbsp; 时的异常</td><td valign="top" align="left">在 C++ 标准（ISO/IEC 
				14882:2003）第 15.2 节中明确规定，在使用 new 或 new[] 
				操作创建对象时，如对象的构造函数抛出了异常，则该对象的所有成员和基类都将被正确析构，<b>如果存在一个与使用的 operator 
				new 严格匹配的 operator delete，则为这个对象所分配的内存也会被释放</b>。例如：<div align="center">
　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table256" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
				<font color="#0000ff" face="Fixedsys">class CSample</font><font color="#880000" face="Fixedsys"><br>{<br>
&nbsp;&nbsp;&nbsp; </font><font face="Fixedsys"><font color="#0000ff">CSample</font><font color="#880000">() 
				{ </font><font color="#0000ff">throw</font><font color="#880000"> </font>
				<font color="#ff0000">-1</font><font color="#880000">; }</font></font><font color="#880000" face="Fixedsys"><br>
				<br>&nbsp;&nbsp;&nbsp; </font>
				<font color="#0000ff" face="Fixedsys">static</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">void</font><font color="#880000" face="Fixedsys">* </font>
				<font color="#0000ff" face="Fixedsys">operator</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">new</font><font color="#880000" face="Fixedsys">(</font><font color="#ff8000" face="Fixedsys">IN</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">size_t</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#808080" face="Fixedsys">n</font><font color="#880000" face="Fixedsys">)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </font>
				<font color="#0000ff" face="Fixedsys">return</font><font color="#880000" face="Fixedsys"> 
				malloc(</font><font color="#808080" face="Fixedsys">n</font><font color="#880000" face="Fixedsys">); 
				}<br>
				<br>
&nbsp;&nbsp;&nbsp; </font><font color="#0000ff" face="Fixedsys">static</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">void</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">operator</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">delete</font><font color="#880000" face="Fixedsys">(</font><font color="#ff8000" face="Fixedsys">IN</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">void</font><font color="#880000" face="Fixedsys">* </font>
				<font color="#808080" face="Fixedsys">p</font><font color="#880000" face="Fixedsys">)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { free(</font><font color="#808080" face="Fixedsys">p</font><font color="#880000" face="Fixedsys">); 
				}<br>
				<br>
				&nbsp;&nbsp;&nbsp; </font><font color="#0000ff" face="Fixedsys">
				static</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">void</font><font color="#880000" face="Fixedsys">* </font>
				<font color="#0000ff" face="Fixedsys">operator</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">new</font><font color="#880000" face="Fixedsys">(</font><font color="#ff8000" face="Fixedsys">IN</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">size_t</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#808080" face="Fixedsys">n</font><font color="#880000" face="Fixedsys">, </font>
				<font color="#ff8000" face="Fixedsys">IN</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#0000ff" face="Fixedsys">CMemMgr</font><font color="#880000" face="Fixedsys">&amp;
				</font><font color="#808080" face="Fixedsys">X</font><font color="#880000" face="Fixedsys">)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </font>
				<font color="#0000ff" face="Fixedsys">return</font><font color="#880000" face="Fixedsys"> </font>
				<font color="#808080" face="Fixedsys">X</font><font color="#880000" face="Fixedsys">.Alloc(</font><font color="#808080" face="Fixedsys">n</font><font color="#880000" face="Fixedsys">); 
				} </font><font color="#008000" face="Fixedsys"> // 缺少匹配的 
				operator delete</font><font color="#880000" face="Fixedsys"><br>
				};</font><font face="Fixedsys"><font color="#880000"><br><br><br></font><font color="#0000ff">void</font><font color="#880000"><br>Function(</font><font color="#0000ff">void</font><font color="#880000">)<br>{<br>
&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CSample</font><font color="#880000">*</font><font color="#0000ff"> </font>
				<font color="#808080">p1</font><font color="#0000ff"> </font>
				<font color="#880000">=</font><font color="#0000ff"> new</font><font color="#880000"> </font><font color="#0000ff">CSample</font><font color="#880000">;
				</font><font color="#008000">// 有匹配的 operator delete，为 p1 
				分配的内存会被释放<br>
				</font><font color="#880000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CSample</font><font color="#880000">*</font><font color="#0000ff"> </font>
				<font color="#808080">p2</font><font color="#0000ff"> </font>
				<font color="#880000">=</font><font color="#0000ff"> new</font><font color="#880000">(</font><font color="#808080">iMyMemMgr</font><font color="#880000">)
				</font><font color="#0000ff">CSample</font><font color="#880000">;
				</font><font color="#008000">// 没有匹配的 operator delete，内存泄漏！为 p2 
				分配的内存永远不会被释放<br>
				</font></font><font color="#880000" face="Fixedsys">}<br>
				</font><font face="Fixedsys"><font color="#880000"><br><br>
				</font><font color="#008000">// 编译器实际生成的代码像这样：</font><font color="#880000"><br></font><font color="#0000ff">void</font><font color="#880000"><br>Function(</font><font color="#0000ff">void</font><font color="#880000">)<br>{<br>
&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CSample</font><font color="#880000">*</font><font color="#0000ff"> </font>
				<font color="#808080">p1</font><font color="#880000"> = </font>
				<font color="#0000ff">CSample</font><font color="#880000">::</font><font color="#0000ff">operator</font><font color="#880000">
				</font><font color="#0000ff">new</font><font color="#880000">(</font><font color="#0000ff">sizeof</font><font color="#880000">(</font><font color="#0000ff">CSample</font><font color="#880000">));</font><font color="#0000ff"> </font>
				<font color="#880000"><br>
&nbsp;&nbsp;&nbsp; try { </font><font color="#808080">p1</font><font color="#880000">-&gt;</font><font color="#0000ff">CSample</font><font color="#880000">(); 
				} </font><font color="#0000ff">catch</font><font color="#880000">(...) 
				{</font><font color="#0000ff">CSample</font><font color="#880000">::</font><font color="#0000ff">opertaor</font><font color="#880000">
				</font><font color="#0000ff">delete</font><font color="#880000">(</font><font color="#808080">p1</font><font color="#880000">);
				</font><font color="#0000ff">throw</font><font color="#880000">; 
				}<br>
				</font><font color="#008000"><br>
				</font><font color="#880000">&nbsp;&nbsp;&nbsp; </font><font color="#0000ff">CSample</font><font color="#880000">*</font><font color="#0000ff"> </font>
				<font color="#808080">p2</font><font color="#0000ff"> </font>
				<font color="#880000">=</font><font color="#0000ff"> </font>
				<font color="#0000ff">CSample</font><font color="#880000">::</font><font color="#0000ff">operator</font><font color="#880000">
				</font><font color="#0000ff">new</font><font color="#880000">(</font><font color="#0000ff">sizeof</font><font color="#880000">(</font><font color="#0000ff">CSample</font><font color="#880000">),
				</font><font color="#808080">iMyMemMgr</font><font color="#880000">);<br>
&nbsp;&nbsp;&nbsp; </font><font color="#808080">p2</font><font color="#880000">-&gt;</font><font color="#0000ff">CSample</font><font color="#880000">();</font><font color="#008000"><br>
				</font></font><font color="#880000" face="Fixedsys">}</font></td></tr></tbody></table>
				</div>
				<p>这里顺便提一句，delete 操作只会匹配普通的 operator delete（即：全局或类中的 operator 
				delete(void*) 和类中的 operator delete(void*, size_t)），<b>如果像上例中的 p2 
				那样使用了一个高度自定义的 operator new，用户就需要自己完成析构和释放内存的动作</b>，例如：</p>
				<div align="center">
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table257" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
				<font face="Fixedsys"><font color="#880000">&nbsp;&nbsp;&nbsp; </font><font color="#008000">// 
				...<br>
				</font><font color="#880000">&nbsp;&nbsp;&nbsp; </font>
				<font color="#808080">p2</font><font color="#880000">-&gt;~</font><font color="#0000ff">CSample</font><font color="#880000">();</font><font color="#0000ff"><br>
&nbsp;&nbsp;&nbsp; CSample</font><font color="#880000">::</font><font color="#0000ff">operator 
				delete</font><font color="#880000">(</font><font color="#808080">p2</font><font color="#880000">,</font><font color="#0000ff"> </font>
				<font color="#808080">iMymemMgr</font><font color="#880000">);</font></font></td></tr></tbody></table>
					<p>　</p></div>
				</td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
				delete 时的异常</td><td valign="top" align="left">C++ 
				标准中明确规定，如果在一个析构函数中中途返回（不管通过 return 还是 
				throw），该析构函数不会立即返回，而是会逐一调用所有成员和基类的析构函数后才会返回。但是标准中并没有说明如果这个异常是在 
				delete 时发生的（即：该对象是由 new 创建的），此对象本身所占用的堆存储是否会被释放（即：在 delete 
				时析构函数抛出异常会不会调用 operator delete 释放这个对象占用的内存）。<p><b>在实际情况中，被 
				delete 的对象析构函数抛出异常后，GCC、VC 等流行的 C++ 编译器都不会自动调用 operator delete 
				释放对象占用的内存</b>。这种与 new 操作不一致的行为，其背后的理念是：在构造时抛出异常的对象尚未成功创建，系统应当收回事先为其分配的资源；而析构时抛出异常的对象
				并未成功销毁，系统不能自动回收它使用的内存（意即：系统仅自动回收确定完全无用的资源）。</p>
				<p>例如：如果一个对象在构造时申请了系统资源（比如：打开了一个设备）并保留了与该资源对应的句柄，但在析构时归还该资源失败（例如：关闭设备失败），则自动调用 
				operator delete 会丢失这个尚未关闭的句柄，导致用户永远失去向系统归还资源或者执行进一步错误处理的机会。反之，如果这个对象在构造时就没能成功地申请到相应资源，则自动回收预分配给它的内存空间是安全的，不会产生任何资源泄漏。</p>
				<p>
				应当注意到，<b>如果一个对象在析构时抛出了异常，则这个对象很可能已经处于一个不完整的状态</b>。此时访问该对象中的任何非静态成员都是不安全的。因此，应当在被抛出的异常中包含完成进一步处理的足够信息。这样捕获到这个异常的用户就可以安全地释放该对象占用的内存，并且仅使用异常对象完成后续处理。例如：</p>
				<div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table258" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">//! 
					delete 时异常处理的例子</font><br><span class="GramE">
					<span lang="en-us"><font color="#0000ff">void</font></span><span style="font-size: 12pt; color: rgb(136, 0, 0);" lang="EN-US"><br>Function</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">(</span></span><span style="font-size: 12pt; color: blue;" lang="EN-US">void</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">)</font><o:p><br></o:p><font face="Fixedsys">{<br>
&nbsp;&nbsp;&nbsp; </font></span><font face="Fixedsys"><font color="#0000ff">CSample</font><font color="#880000">*</font><font color="#0000ff"> </font>
					<font color="#808080">p1</font><font color="#0000ff"> </font>
					<font color="#880000">=</font><font color="#0000ff"> new</font><font color="#880000"> </font><font color="#0000ff">CSample</font><font color="#880000">;</font></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys"><br>
					</font></span><font face="Fixedsys">
					<span style="font-size: 12pt; color: maroon;" lang="EN-US"> &nbsp;&nbsp;&nbsp; </span><font color="#008000">// ...<br>
					</font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br> </span>
					<span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US"><span class="GramE">try</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>&nbsp;&nbsp;&nbsp; {<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
					<font color="#0000ff">delete</font><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span>
					<font color="#808080">p1</font><span style="font-size: 12pt; color: maroon;" lang="EN-US">;<br>
&nbsp;&nbsp;&nbsp; }</span></font><br><font face="Fixedsys">
					<span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt;"><font color="#0000ff">const sampleExp</font></span><font color="#880000">&amp;</font><font color="#0000ff"><span style="font-size: 12pt;"> </span></font><font color="#808080">err</font><span style="font-size: 12pt; color: maroon;" lang="EN-US">)</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;{</font><o:p><br></o:p></span>
					<font face="Fixedsys">
					<span style="font-size: 12pt; color: green;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><font color="#0000ff">CSample</font><font color="#880000">::</font><font color="#0000ff">operator 
					delete</font><font color="#880000">(</font><font color="#808080">p1</font><font color="#880000">);
					</font><span style="font-size: 12pt; color: green;" lang="EN-US">// 释放 p1 所占用的内存 </span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// 使用 err 对象完成后续的错误处理... <br>
					</span></font>
					<span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">&nbsp;&nbsp;&nbsp;&nbsp;}<br></font></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}</span></font></td></tr></tbody></table></div>
				<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">异常的组织</td><td valign="top" align="left">异常类应该以继承的方式组织成一个层次结构，这将使以不同粒度分类处理错误成为可能。<p>通常，某个软件生产组织的所有异常都从一个公共的基类派生出来。而每个类的异常则从该类所属模块的公共异常基类中派生。例如：</p><p>
			<img src="index_files/exp_arch.png" border="0"></p><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">异常捕获和重新抛出</td><td valign="top" align="left"><ul><li>异常捕获器的书写顺序应当由特殊到一般（先子类后基类），最后才是处理所有异常的捕获器（"catch(...)"）。否则将使某些异常捕获器永远不会被执行。<br>　</li><li>为避免捕获到的异常被截断，异常捕获器中的参数类型应当为常引用型或指针型。<br>　</li><li>在某级异常捕获器中无法被彻底处理的错误可以被重新抛出。重新抛出采用一个不带运算对象的 "throw" 语句。重新抛出的对象就是刚刚被抛出的那个异常，而不是处理器捕获到的（有可能被截断的）异常。</li></ul><p>例如：</p><div align="center">
			<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table240" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><span style="font-size: 12pt; color: rgb(0, 0, 255);" lang="EN-US"><span class="GramE">try</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> <br>{<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: green;" lang="EN-US">// ...</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}<br></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">// 公钥加密错误</span></font></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: rgb(0, 0, 255);">const CPubKeyCipher</span><font color="#880000"><span style="font-size: 12pt;">::</span></font><span style="font-size: 12pt; color: rgb(0, 0, 255);">Exp</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&amp; </span><font color="#808080"><span style="font-size: 12pt;" lang="EN-US">err</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US">)&nbsp; <br>{<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">if</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt;" lang="EN-US">可以恢复</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">// 恢复错误</span></font></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">else</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">// 完成能做到的事情</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">throw</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">//</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">重</span></font><span style="font-size: 12pt;"><font color="#008000">新</font></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">抛出</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; }</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><font face="Fixedsys">&nbsp;&nbsp;&nbsp; </font><o:p><br></o:p></span><font face="Fixedsys"><span style="font-size: 12pt; color: maroon;" lang="EN-US">}<br></span><span style="font-size: 12pt;"><font color="#008000">//</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt;"><font color="#008000">处理其它加密库错误</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br></span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">CryptoExp</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&amp; </span><span style="font-size: 12pt;"><font color="#808080">err</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>{<br>&nbsp;&nbsp;&nbsp; </span><font color="#008000"><span style="font-size: 12pt;">// ...</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}<br></span><span style="font-size: 12pt;"><font color="#008000">// 处理其它本公司模块抛出的错误</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br></span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">CompanyExp</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&amp; </span><span style="font-size: 12pt;"><font color="#808080">err</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>{<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">// ...</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span><span style="font-size: 12pt;"><font color="#008000"><br>// 处理 dynamic_cast 错误<br></font></span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);">bad_cast</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&amp; </span><span style="font-size: 12pt;"><font color="#808080">err</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>{<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">// ...</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span><span style="font-size: 12pt;"><font color="#008000"><br>// 处理其它标准库错误<br></font></span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (</span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">const</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><span class="GramE"><span style="font-size: 12pt; color: rgb(0, 0, 255);">exception</span></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&amp; </span><span style="font-size: 12pt;"><font color="#808080">err</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US">)<br>{<br>&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">// ...</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span><span style="font-size: 12pt;"><font color="#008000"><br>// 处理所有其它错误<br></font></span><span style="font-size: 12pt; color: rgb(0, 0, 255);" class="GramE">catch</span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> (...)<br>{<br>
				</span><span style="font-size: 12pt; color: maroon;" lang="EN-US">&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">// 
				完成清理和日志等基本处理...</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>&nbsp;&nbsp;&nbsp; </span><font color="#0000ff"><span style="font-size: 12pt;" lang="EN-US">throw</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US">;&nbsp; </span><span style="font-size: 12pt;"><font color="#008000">//</font></span><span style="font-size: 12pt; color: maroon;" lang="EN-US"> </span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">重</span></font><span style="font-size: 12pt;"><font color="#008000">新</font></span><font color="#008000"><span style="font-size: 12pt;" lang="EN-US">抛出</span></font><span style="font-size: 12pt; color: maroon;" lang="EN-US"><br>}</span></font></td></tr></tbody></table></div><p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">异常和效率</td><td valign="top" align="left">对于绝大部分现代编译器来说，在不抛出异常的情况下，异常处理的实现在运行时几乎不会有任何额外开销。相反，很多时候，异常机制比传统的通过返回值判断错误的开销还来得稍微小些。<p>相对于函数返回和调用的开销来讲，异常抛出和捕获的开销通常会大一些。不过错误处理代码通常不会频繁调用，再说传统的错误处理方式也不是没有代价的。所以错误处理时开销稍大一点基本上不是什么问题。这也是我们提倡仅将异常用于错误处理的原因之一。</p><p>更多关于效率的讨论，参见：<a href="http://baiy.cn/doc/cpp/inside_exception.htm"><b>C++异常机制的实现方式和开销分析</b></a>
				和<b> <a href="http://baiy.cn/doc/cpp/inside_rtti.htm">RTTI、虚函数和虚基类的开销分析和使用指导</a></b> 
				等小节。</p></td></tr></tbody></table></div></td></tr></tbody></table><h3 align="left">　</h3>
	<h3 align="left"><a name="代码风格与版式_修改标记">修改标记</a><br>
<img src="index_files/01.png" width="733" border="0" height="8"></h3><div align="center">
		<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table241" width="95%" border="0" cellpadding="4"><tbody><tr><td><div align="center"><p align="left">
			在代码交叉审查，或使用带完整源代码的第三方库时，经常需要为某些目的修改源码。这时应当为被改动的部分添加修改标记。</p>
			<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table242" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
				何时使用修改标记</td><td valign="top" align="left">
				修改标记通常仅用于修改者不是被修改模块（或项目）的主要作者时，但也可以用于在调试、重构或添加新特性时进行临时标注。<p>
				在交叉审查中使用的修改标记，当原作者已经确认并将其合入主要版本之后，应当予以消除，以避免由于多次交叉审查累积的标记混乱。但是相应的修改应当记入文件头的修改记录中。</p>
				<p>　</p></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
					修改标记的格式</td><td valign="top" align="left">
					修改标记分为单行标记和段落标记两种，单行标记用于指示对零星的单行代码进行的修改，段落标记则用于指出对一组任意长度的代码作出的修改。它们的格式如下：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table243" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb"><font face="Fixedsys"><font color="#008000">// 
						单行标记:</font><br><font color="#008000">// code ...; // by 
						&lt;修改者&gt; - &lt;目的&gt; [@ YYYY-MM-DD（可选的修改日期）]<br>
						<br>
						// 段落标记:<br>
						// [[ by &lt;修改者&gt; - &lt;目的&gt; [@ YYYY-MM-DD（可选的修改日期）]<br>
						//&nbsp;&nbsp;&nbsp; 详细说明（可选，可多行）<br>
						// ... // 被修改的代码段落<br>
						// ]] [by &lt;修改者&gt;]</font></font></td></tr></tbody></table>
						<p align="left">注意段落标记结尾的 "by &lt;修改者&gt;" 字段是可选的。</p>
						<p align="left">此外，在比较混乱或较长的代码段中，可以将段落开始（"// 
						[["）和段落结束（"// ]]"）标记扩展层次结构更为明显的："// ---- [[" 和 "// ---- 
						]]"</p>
						<p align="left">例如：</p><div align="center">
							<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table244" width="95%" border="0" cellpadding="4"><tbody><tr><td style="line-height: 100%;" bgcolor="#ebebeb">
								<span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								&nbsp;&nbsp;&nbsp; <span style="color: green;">// [[ by BaiYang - 
								limit @ 2005-03-29<br>
								</span>&nbsp;&nbsp;&nbsp; <span style="color: green;">//&nbsp;&nbsp;&nbsp; add 
								pre compile and delay binding support to "limit 
								[s,]n". </span><span style="color: blue;">
								<br>
&nbsp;&nbsp;&nbsp; void</span>
								</span>
								<span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">
								setStatementLimit</span><span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US"><span style="color: maroon;">(</span></span><span style="color: blue; font-size: 12pt; font-family: Fixedsys;">dbQuery</span><span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								<span style="color: blue;">const</span><span style="color: maroon;">&amp;</span>
								</span>
								<span style="color: gray; font-size: 12pt;">
								<font face="Fixedsys">q</font></span><span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US"><span style="color: maroon;">)</span>
								<span style="color: maroon;">{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>
								<span style="color: green; font-size: 12pt; font-family: Fixedsys;">
								// ...</span><span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US"><span style="color: maroon;"><br>
								</span>&nbsp;&nbsp;&nbsp; <span style="color: maroon;">}<br>
								</span>&nbsp;&nbsp;&nbsp; <span style="color: green;">// ]]<br>
								</span></span>
								<span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								<br>
								// ...<br>
								<br>
								// ---- [[ by Mark - multithread<br>
								</span>
								<span style="color: blue; font-size: 12pt; font-family: Fixedsys;">
								void</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span>
								<span style="color: blue; font-size: 12pt; font-family: Fixedsys;">
								dbCompiler</span><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">::compileLimitPart(</span><span style="color: blue; font-size: 12pt; font-family: Fixedsys;">dbQuery</span><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">&amp;</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span>
								<span style="color: gray; font-size: 12pt;">
								<font face="Fixedsys">query</font></span><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">)<br>
								{</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								<br>
&nbsp;&nbsp;&nbsp; // ...<br>
&nbsp;&nbsp;&nbsp; </span><span style="color: blue; font-size: 12pt; font-family: Fixedsys;">
								int4</span><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">*</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span>
								<span style="color: gray; font-size: 12pt;">
								<font face="Fixedsys">lp1</font></span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span>
								<span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">
								=</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span><font color="#ff8000">
								<span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								INVPTR</span></font><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">;</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US"> 
								// by BaiYang - limit<br>
&nbsp;&nbsp;&nbsp; </span><span style="color: blue; font-size: 12pt; font-family: Fixedsys;">
								switch</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span>
								<span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">
								(scan()) <br>
&nbsp;&nbsp;&nbsp; {<br>
								</span>
								<span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
								</span>
								<span style="color: blue; font-size: 12pt; font-family: Fixedsys;">
								case</span><span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								</span><font color="#ff8000">
								<span style="font-size: 12pt; font-family: Fixedsys;" lang="EN-US">
								tkn_iconst</span></font><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;">:<br>
								</span>
								<span style="color: green; font-size: 12pt; font-family: Fixedsys;" lang="EN-US">&nbsp;&nbsp;&nbsp; 
								// ...</span><span style="color: maroon; font-size: 12pt; font-family: Fixedsys;"><br>
								}<br>
								</span>
								<span style="color: green; font-size: 12pt; font-family: Fixedsys;">
								// ---- ]] by Mark</span></td></tr></tbody></table>
							<p align="left">　</p></div></div></td></tr><tr><td valign="top" width="181" align="left" bgcolor="#ebebeb">
						<font color="#808080">修改标记的语言</font></td><td valign="top" align="left">
						修改标记当中的说明性文字应当尽量选择与被修改项目一致的语言书写。例如在全英文的项目中应当尽量避免添加中文注释。<p>
						否则能完全看懂修改后项目的程序员将会被限制于同时掌握多种自然语言的人。</p></td></tr></tbody></table></div></td></tr></tbody></table></div></div></td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="版本控制">版本控制</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table24" width="95%" border="0" cellpadding="4"><tbody><tr><td><ul><li>源代码的版本按文件的粒度进行维护。</li><li>创建一个新文件时，其初始版本为 "1.0"，创建过程中的任何修改都不需要增加修改记录。</li><li>从软件第一次正式发布开始，对其源文件的每次修改都应该在文件头中加入相应的修改记录，并将文件的子版本加1。</li><li>升级软件的主版本时，其源文件的相应主版本号随之增加。与创建新文件时一样，在该主版本第一 次发布之前，对文件的任何修改都不需要再增加修改记录。</li></ul></td></tr></tbody></table><p align="left">　</p><p align="left"></p><p align="left"><a href="#%C4%BF%C2%BC">
	<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="英文版">英文版</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table147" width="95%" border="0" cellpadding="4"><tbody><tr><td>对于为海外用户编写的代码，所有注释都统一使用英文。关于各标准注释的英文模板，请参考：<a href="http://baiy.cn/doc/cpp/comments_en.htm">常用英文注释一览</a></td></tr></tbody></table></div><p align="left">　</p></div><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="自动工具与文档生成">自动工具与文档生成</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table25" width="95%" border="0" cellpadding="4"><tbody><tr><td>纵观 MSDN、unix/linux manaul(man)、wxWindows Doc等享有盛誉的开发文档都是手工或半手工编写的。相反，那些完全由自动工具生成的文档基本上都是被广大程序员唾弃的 
	<img src="index_files/a.gif" width="19" border="0" height="19">。<p>由
此可以看出，以现今的人工智能科技，完全由机器生成的文档，仍然无法满足人类阅读的需要。但是一份注释详实、版式规范的源代码配合一些简单的工具确实可以
大大降低文档编写的工作量。从这样的源码中抽取出来的信息，通常只要稍加整理和修改就可以得到一份媲美MSDN的文档了。</p><p>详情参见：软件模块用户文档模板</p></td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="关于本规范的贯彻实施">关于本规范的贯彻实施</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table74" width="95%" border="0" cellpadding="4"><tbody><tr><td>像这样一套完整、详细、繁琐又重要的规范，最难的恐怕就是贯彻实施的环节了。有鉴于此，特提供几点意见：<div align="center">　<table style="border-collapse: collapse;" bordercolorlight="#C0C0C0" bordercolordark="#C0C0C0" id="table75" width="95%" border="1" bordercolor="#c0c0c0" cellpadding="4"><tbody><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">设立代码审查小组</font></td><td valign="top" align="left">对于大型开发团队，可以设立专门的代码审查小组，对项目的所有源码进行有计划的审查和评估。</td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">设立交叉审查制度</font></td><td valign="top" align="left">在程序员间设立源码的交叉审查制度，鼓励大家互相督促。</td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">提供专门的检查工具</font></td><td valign="top" align="left">以IDE插件和独立应用程序的形式提供专门的自动化批量代码检查工具，提高审查与自我检查的效率和精度。</td></tr><tr><td valign="top" width="182" align="left" bgcolor="#ebebeb"><font color="#808080">设立奖惩和激励机制</font></td><td valign="top" align="left">不用多说了，金钱加大棒。坚决执行的公开表扬、发奖金；发证书，顽冥不化的K一顿然后废了他 
	<img src="index_files/a_002.gif" width="19" border="0" height="19"></td></tr></tbody></table></div></td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="术语表">术语表</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table72" width="95%" border="2" cellpadding="4"><tbody><tr><td valign="top" width="222" align="left" bgcolor="#c0c0c0"><b>术语</b></td><td valign="top" align="left" bgcolor="#c0c0c0"><b>解释</b></td></tr><tr><td valign="top" width="222" align="left">API</td><td valign="top" align="left">应用程序编程接口</td></tr><tr><td valign="top" width="222" align="left">UI</td><td valign="top" align="left">用户界面</td></tr><tr><td valign="top" width="222" align="left">GUI</td><td valign="top" align="left">图形用户界面</td></tr><tr><td valign="top" width="222" align="left">
OOP</td><td valign="top" align="left">面向对象的程序开发</td></tr><tr><td valign="top" width="222" align="left">IDE</td><td valign="top" align="left">集成开发环境</td></tr><tr><td valign="top" width="222" align="left">
	<img src="index_files/mygj_bcfy.png" width="217" border="0" height="22"></td><td valign="top" align="left">没有规矩 否成方圆 
	<img src="index_files/a.gif" width="19" border="0" height="19"></td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="参考文献">参考文献</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table73" width="95%" border="2" cellpadding="4"><tbody><tr><td valign="top" width="400" align="left" bgcolor="#c0c0c0"><b>名称</b></td><td valign="top" width="251" align="left" bgcolor="#c0c0c0"><b>作者</b></td><td valign="top" align="left" bgcolor="#c0c0c0"><b>发布/出版日期</b></td></tr><tr><td valign="top" width="400" align="left">C++程序设计语言――特别版</td><td valign="top" width="251" align="left">Bjarne Stroustrup</td><td valign="top" align="left">2002</td></tr><tr><td valign="top" width="400" align="left">
ANSI/ISO C++ Professional Programmer's Handbook</td><td valign="top" width="251" align="left">Denny Kalev</td><td valign="top" align="left">
1999</td></tr><tr><td valign="top" width="400" align="left">ISO/IEC 14882 
	Programming Languages -- C++</td><td valign="top" width="251" align="left">
	the ANSI C++ community</td><td valign="top" align="left">1998</td></tr><tr><td valign="top" width="400" align="left">Microsoft MSDN</td><td valign="top" width="251" align="left">微软公司</td><td valign="top" align="left">期刊，参照版本为2004年4月</td></tr><tr><td valign="top" width="400" align="left">linux/unix在线手册（man）</td><td valign="top" width="251" align="left">-</td><td valign="top" align="left">-</td></tr><tr><td valign="top" width="400" align="left">wxWindows 2.4.2 Doc</td><td valign="top" width="251" align="left">wxWindows</td><td valign="top" align="left">September 2003</td></tr><tr><td valign="top" width="400" align="left">高质量C++/C编程指南</td><td valign="top" width="251" align="left">林锐 博士</td><td valign="top" align="left">2001年7月24日</td></tr><tr><td valign="top" width="400" align="left">人月神话――20周年纪念版</td><td valign="top" width="251" align="left">Frederick P. Brooks Jr.</td><td valign="top" align="left">2002</td></tr><tr><td valign="top" width="400" align="left">C/C++编程规范（华为）</td><td valign="top" width="251" align="left">苏信南</td><td valign="top" align="left">1997-5-5</td></tr><tr><td valign="top" width="400" align="left">C++编码规范（中兴）</td><td valign="top" width="251" align="left">-</td><td valign="top" align="left">-</td></tr><tr><td valign="top" width="400" align="left">前台软件编程细则（中兴）</td><td valign="top" width="251" align="left">-</td><td valign="top" align="left">-</td></tr>
<tr>
	<td valign="top" width="400" align="left">软件评审</td><td valign="top" width="251" align="left">PMT Community</td><td valign="top" align="left">2002</td>
</tr>
<tr><td valign="top" width="400" align="left">UML 用户指南</td><td valign="top" width="251" align="left">
	Grady Booch<br>
	James Rumbaugh<br>
	Ivar Jacobson</td><td valign="top" align="left">2001年6月</td></tr><tr><td valign="top" width="400" align="left">
	重构――改善现有代码的设计</td><td valign="top" width="251" align="left">Martin Fowler</td><td valign="top" align="left">
	2003年8月</td></tr><tr><td valign="top" width="400" align="left">设计模式</td><td valign="top" width="251" align="left">
	Erich Gamma 等</td><td valign="top" align="left">2000年9月</td></tr></tbody></table></div><p align="left">　</p><p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="C++成长篇">C++成长篇</a></h2>
<div align="center">
	<table style="border-collapse: collapse;" id="table228" width="95%" border="0" bordercolor="#c0c0c0">
		<tbody><tr>
			<td>本篇归纳了一C++程序员成长中的各个阶段，以及踏入该阶段的最佳武林秘笈。本篇仅供各位大侠茶余饭后时拍砖用 
			<img src="index_files/a_005.gif" width="19" border="0" height="19">。<p>这里只围绕<b>纯粹的C++程序设计语言</b>进行讨论。当然，要成为一个称职的程序员，计算机原理、操作系统、数据库等其它方面的专业知识也是十分重要的。</p><div align="center">
				<table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table229" width="95%" border="1" cellpadding="4"><tbody><tr><td width="475" bgcolor="#c0c0c0">
					<b>秘笈</b></td><td bgcolor="#c0c0c0"><b>作者</b></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">初入江湖――惨不忍睹</td></tr><tr><td valign="top" width="475" align="left">C++程序设计教程<br><b>&nbsp;</b>－ 或 －<br>C++语言程序设计（第二版）</td><td valign="top" align="left">钱能<br><br>郑莉 董渊<p>　</p></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">小有名气――将就着用</td></tr><tr><td valign="top" width="475" align="left">Thinking in C++ 2nd edition</td><td valign="top" align="left">Bruce Eckel<p>　</p></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">名动一方――在大是大非的问题上立场坚定</td></tr><tr><td valign="top" width="475" align="left"><font style="font-style: normal; font-variant: normal; font-weight: normal;" face="新宋体">Effective C++(第二版) 和 More Effective C++</font></td><td valign="top" align="left"><font face="新宋体">Scott Meyers </font>(Lostmouse、候捷 等 译)<p>　</p></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">天下闻名――正确的使用C++的每个特性</td></tr><tr><td valign="top" width="475" align="left">C++程序设计语言――特别版<br>
&nbsp;－ 和 －<br>
					ANSI/ISO C++ Professional Programmer's Handbook<p>　</p></td><td valign="top" align="left">Bjarne Stroustrup (裘宗燕 译)<br>
					<br>
					Denny Kalev<p>　</p></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">一代宗师――掌握通用程序设计思想</td></tr><tr><td valign="top" width="475" align="left">范型编程与STL</td><td valign="top" align="left">Matthew H. Austem (候捷 译)<p>　</p></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">超凡入圣――清楚C++的每个细节</td></tr><tr><td valign="top" width="475" align="left">ISO/IEC 14882: Programming Languages－C++<p>　</p></td><td valign="top" align="left">ISO/IEC<p>　</p></td></tr><tr><td colspan="2" valign="top" align="left" bgcolor="#ebebeb">天外飞仙――透过C++的军大衣，看到赤裸裸的汇编码</td></tr><tr><td colspan="2" valign="top" align="left">GCC的源码烂熟于胸，有事没事的随便写个编译器玩玩～ <p>　</p></td></tr></tbody></table></div>
			</td>
		</tr>
	</tbody></table>
</div>
<p align="left"><a href="#%C4%BF%C2%BC">
<img src="index_files/01_002.png" alt="返回目录" align="right" border="0"></a></p><hr size="5" color="#808080" noshade="noshade"><h2 align="left"><a name="与我联系">与我联系</a></h2><div align="center"><table style="border-collapse: collapse;" bordercolorlight="#808080" bordercolordark="#808080" id="table154" width="95%" border="0" cellpadding="4"><tbody><tr><td>如有任何建议或意见，请发邮件至：<a href="mailto:asbai@msn.com?subject=%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E7%9A%84%E5%BB%BA%E8%AE%AE">asbai@msn.com</a>，或通过MSN：asbai@msn.com 与我联系。</td></tr></tbody></table></div><p align="left">　</p><p align="left">　</p><p align="left">　</p><p align="left">　</p><p align="left">　</p><p align="left">　</p><p align="left">　</p></body></html>